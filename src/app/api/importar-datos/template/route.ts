import { NextRequest, NextResponse } from 'next/server'
import * as XLSX from 'xlsx'

export async function GET(request: NextRequest) {
  try {
    // Crear un nuevo workbook
    const workbook = XLSX.utils.book_new()

    // Definir los datos de ejemplo y headers para cada hoja

    // Hoja de Gastos
    const gastosHeaders = [
      'concepto', 'monto', 'fecha', 'categoria', 'tipoTransaccion', 'tipoMovimiento'
    ]
    const gastosExample = [
      ['Supermercado Carrefour', 15000, '15/01/2025', 'Alimentaci√≥n', 'expense', 'tarjeta'],
      ['Sueldo enero', 500000, '01/01/2025', 'Salario', 'income', 'digital'],
      ['Nafta YPF', 25000, '10/01/2025', 'Transporte', 'expense', 'efectivo'],
      ['Factura de luz', 18000, '05/01/2025', 'Servicios', 'expense', 'digital'],
      ['Cena restaurant', 35000, '12/01/2025', 'Entretenimiento', 'expense', 'tarjeta']
    ]
    
    const gastosData = [gastosHeaders, ...gastosExample]
    const gastosSheet = XLSX.utils.aoa_to_sheet(gastosData)
    
    // Ajustar ancho de columnas
    gastosSheet['!cols'] = [
      { width: 25 }, // concepto
      { width: 12 }, // monto
      { width: 12 }, // fecha
      { width: 15 }, // categoria
      { width: 15 }, // tipoTransaccion
      { width: 15 }  // tipoMovimiento
    ]

    XLSX.utils.book_append_sheet(workbook, gastosSheet, 'Gastos')

    // Hoja de Gastos Recurrentes
    const recurrentesHeaders = [
      'concepto', 'monto', 'periodicidad', 'categoria', 'proximaFecha', 'comentario'
    ]
    const recurrentesExample = [
      ['Netflix', 2500, 'mensual', 'Entretenimiento', '15/02/2025', 'Suscripci√≥n premium'],
      ['Alquiler', 180000, 'mensual', 'Vivienda', '01/02/2025', 'Depto 2 amb'],
      ['Seguro auto', 45000, 'trimestral', 'Transporte', '15/03/2025', 'Cobertura completa'],
      ['Spotify', 1200, 'mensual', 'Entretenimiento', '20/02/2025', 'Plan individual']
    ]
    
    const recurrentesData = [recurrentesHeaders, ...recurrentesExample]
    const recurrentesSheet = XLSX.utils.aoa_to_sheet(recurrentesData)
    
    recurrentesSheet['!cols'] = [
      { width: 20 }, // concepto
      { width: 12 }, // monto
      { width: 15 }, // periodicidad
      { width: 15 }, // categoria
      { width: 15 }, // proximaFecha
      { width: 30 }  // comentario
    ]

    XLSX.utils.book_append_sheet(workbook, recurrentesSheet, 'Gastos Recurrentes')

    // Hoja de Presupuestos
    const presupuestosHeaders = [
      'nombre', 'monto', 'categoria', 'mes', 'a√±o'
    ]
    const presupuestosExample = [
      ['Presupuesto Alimentaci√≥n Enero', 80000, 'Alimentaci√≥n', 1, 2025],
      ['Presupuesto Transporte Enero', 50000, 'Transporte', 1, 2025],
      ['Presupuesto Entretenimiento Enero', 30000, 'Entretenimiento', 1, 2025],
      ['Presupuesto Servicios Enero', 60000, 'Servicios', 1, 2025]
    ]
    
    const presupuestosData = [presupuestosHeaders, ...presupuestosExample]
    const presupuestosSheet = XLSX.utils.aoa_to_sheet(presupuestosData)
    
    presupuestosSheet['!cols'] = [
      { width: 30 }, // nombre
      { width: 12 }, // monto
      { width: 15 }, // categoria
      { width: 8 },  // mes
      { width: 8 }   // a√±o
    ]

    XLSX.utils.book_append_sheet(workbook, presupuestosSheet, 'Presupuestos')

    // Hoja de Pr√©stamos
    const prestamosHeaders = [
      'entidadFinanciera', 'tipoCredito', 'montoSolicitado', 'montoAprobado', 
      'montoDesembolsado', 'tasaInteres', 'plazoMeses', 'cuotaMensual',
      'fechaDesembolso', 'fechaPrimeraCuota', 'fechaVencimiento', 'proposito'
    ]
    const prestamosExample = [
      [
        'Banco Naci√≥n', 'Personal', 500000, 450000, 450000, 
        65.5, 36, 18500, '15/12/2024', '15/01/2025', '15/12/2027', 
        'Refacci√≥n de vivienda'
      ],
      [
        'Banco Galicia', 'Vehicular', 2000000, 1800000, 1800000, 
        55.2, 60, 48000, '10/11/2024', '10/12/2024', '10/11/2029', 
        'Compra de autom√≥vil'
      ]
    ]
    
    const prestamosData = [prestamosHeaders, ...prestamosExample]
    const prestamosSheet = XLSX.utils.aoa_to_sheet(prestamosData)
    
    prestamosSheet['!cols'] = [
      { width: 20 }, // entidadFinanciera
      { width: 15 }, // tipoCredito
      { width: 15 }, // montoSolicitado
      { width: 15 }, // montoAprobado
      { width: 15 }, // montoDesembolsado
      { width: 12 }, // tasaInteres
      { width: 12 }, // plazoMeses
      { width: 15 }, // cuotaMensual
      { width: 15 }, // fechaDesembolso
      { width: 15 }, // fechaPrimeraCuota
      { width: 15 }, // fechaVencimiento
      { width: 25 }  // proposito
    ]

    XLSX.utils.book_append_sheet(workbook, prestamosSheet, 'Prestamos')

    // Hoja de Instrucciones
    const instruccionesData = [
      ['üöÄ PLANTILLA DE IMPORTACI√ìN DE DATOS FINANCIEROS'],
      [''],
      ['üìã INSTRUCCIONES GENERALES:'],
      ['‚Ä¢ Complete solo las hojas que necesite importar'],
      ['‚Ä¢ No elimine ni modifique los nombres de las columnas (primera fila)'],
      ['‚Ä¢ Puede eliminar las filas de ejemplo y agregar sus propios datos'],
      ['‚Ä¢ Los campos obligatorios est√°n marcados con * en cada hoja'],
      [''],
      ['üìÖ FORMATO DE FECHAS:'],
      ['‚Ä¢ Use formato DD/MM/AAAA (ejemplo: 15/01/2025)'],
      ['‚Ä¢ Excel puede convertir autom√°ticamente las fechas al formato correcto'],
      [''],
      ['üí∞ FORMATO DE MONTOS:'],
      ['‚Ä¢ Use n√∫meros sin separadores de miles'],
      ['‚Ä¢ Use punto (.) como separador decimal si es necesario'],
      ['‚Ä¢ Ejemplo correcto: 15000.50'],
      ['‚Ä¢ Ejemplo incorrecto: 15,000.50'],
      [''],
      ['üè∑Ô∏è CATEGOR√çAS:'],
      ['‚Ä¢ Las categor√≠as se crear√°n autom√°ticamente si no existen'],
      ['‚Ä¢ Use nombres descriptivos y consistentes'],
      ['‚Ä¢ Ejemplos: "Alimentaci√≥n", "Transporte", "Servicios", "Entretenimiento"'],
      [''],
      ['üìä HOJA "GASTOS":'],
      ['‚Ä¢ concepto*: Descripci√≥n del gasto o ingreso'],
      ['‚Ä¢ monto*: Cantidad en pesos argentinos'],
      ['‚Ä¢ fecha*: Fecha de la transacci√≥n (DD/MM/AAAA)'],
      ['‚Ä¢ categoria*: Categor√≠a del gasto'],
      ['‚Ä¢ tipoTransaccion: "expense" (gasto) o "income" (ingreso)'],
      ['‚Ä¢ tipoMovimiento: "efectivo", "digital", "ahorro", "tarjeta"'],
      [''],
      ['üîÑ HOJA "GASTOS RECURRENTES":'],
      ['‚Ä¢ concepto*: Descripci√≥n del gasto recurrente'],
      ['‚Ä¢ monto*: Monto del gasto'],
      ['‚Ä¢ periodicidad*: "mensual", "anual", "trimestral", "semestral"'],
      ['‚Ä¢ categoria*: Categor√≠a del gasto'],
      ['‚Ä¢ proximaFecha: Pr√≥xima fecha de pago (opcional)'],
      ['‚Ä¢ comentario: Observaciones adicionales (opcional)'],
      [''],
      ['üíµ HOJA "PRESUPUESTOS":'],
      ['‚Ä¢ nombre*: Nombre descriptivo del presupuesto'],
      ['‚Ä¢ monto*: Monto presupuestado'],
      ['‚Ä¢ categoria*: Categor√≠a asociada'],
      ['‚Ä¢ mes*: N√∫mero del mes (1-12)'],
      ['‚Ä¢ a√±o*: A√±o del presupuesto (2020-2030)'],
      [''],
      ['üè¶ HOJA "PRESTAMOS":'],
      ['‚Ä¢ entidadFinanciera*: Banco o entidad que otorga el pr√©stamo'],
      ['‚Ä¢ tipoCredito*: Tipo de cr√©dito (personal, hipotecario, vehicular, etc.)'],
      ['‚Ä¢ montoSolicitado*: Monto solicitado original'],
      ['‚Ä¢ montoAprobado*: Monto aprobado por la entidad'],
      ['‚Ä¢ montoDesembolsado*: Monto efectivamente recibido'],
      ['‚Ä¢ tasaInteres*: Tasa de inter√©s anual (%)'],
      ['‚Ä¢ plazoMeses*: Plazo total en meses'],
      ['‚Ä¢ cuotaMensual*: Valor de la cuota mensual'],
      ['‚Ä¢ fechaDesembolso*: Fecha de recepci√≥n del dinero'],
      ['‚Ä¢ fechaPrimeraCuota*: Fecha de la primera cuota'],
      ['‚Ä¢ fechaVencimiento*: Fecha de finalizaci√≥n del pr√©stamo'],
      ['‚Ä¢ proposito: Para qu√© se destin√≥ el pr√©stamo (opcional)'],
      [''],
      ['‚ö†Ô∏è NOTAS IMPORTANTES:'],
      ['‚Ä¢ Los campos marcados con * son obligatorios'],
      ['‚Ä¢ Si hay errores en alguna fila, solo se importar√°n los datos v√°lidos'],
      ['‚Ä¢ Puede ver una vista previa de los datos antes de confirmar la importaci√≥n'],
      ['‚Ä¢ Las categor√≠as nuevas se crear√°n autom√°ticamente con el grupo "Importado"'],
      ['‚Ä¢ Los presupuestos duplicados (misma categor√≠a, mes y a√±o) no se importar√°n'],
      [''],
      ['üéØ CONSEJOS:'],
      ['‚Ä¢ Empiece con pocos registros para probar el sistema'],
      ['‚Ä¢ Revise los datos antes de importar'],
      ['‚Ä¢ Mantenga una copia de respaldo de sus datos'],
      ['‚Ä¢ Si tiene dudas, contacte al soporte t√©cnico'],
      [''],
      ['¬°Gracias por usar nuestro sistema de gesti√≥n financiera! üöÄ']
    ]

    const instruccionesSheet = XLSX.utils.aoa_to_sheet(instruccionesData)
    instruccionesSheet['!cols'] = [{ width: 80 }]
    XLSX.utils.book_append_sheet(workbook, instruccionesSheet, 'Instrucciones')

    // Generar el archivo Excel
    const excelBuffer = XLSX.write(workbook, { 
      type: 'buffer', 
      bookType: 'xlsx',
      compression: true 
    })

    // Configurar headers para la descarga
    const headers = new Headers()
    headers.set('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    headers.set('Content-Disposition', 'attachment; filename="plantilla-gastos-inicial.xlsx"')
    headers.set('Content-Length', excelBuffer.length.toString())

    return new NextResponse(excelBuffer, {
      status: 200,
      headers
    })

  } catch (error) {
    console.error('Error generando plantilla:', error)
    return NextResponse.json({ 
      error: 'Error al generar la plantilla Excel' 
    }, { status: 500 })
  }
} 