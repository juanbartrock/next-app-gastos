// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Para autenticación con credenciales
  accounts      Account[]
  sessions      Session[]
  gastos        Gasto[]
  grupos        GrupoMiembro[]
  gruposAdmin   Grupo[]   @relation("GrupoAdmin")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Grupo {
  id          String    @id @default(cuid())
  nombre      String
  descripcion String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  adminId     String    // ID del usuario administrador
  admin       User      @relation("GrupoAdmin", fields: [adminId], references: [id])
  miembros    GrupoMiembro[]
  gastos      Gasto[]
}

model GrupoMiembro {
  id        String   @id @default(cuid())
  grupoId   String
  userId    String
  rol       String   @default("miembro") // "miembro" o "admin"
  createdAt DateTime @default(now())
  grupo     Grupo    @relation(fields: [grupoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([grupoId, userId])
}

model Gasto {
  id              Int      @id @default(autoincrement())
  concepto        String
  monto           Float
  fecha           DateTime @default(now())
  categoria       String
  tipoTransaccion String   @default("expense") // "income" o "expense"
  tipoMovimiento  String   @default("efectivo") // "efectivo", "digital", "ahorro"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String?  // El usuario que creó el gasto
  grupoId         String?  // El grupo al que pertenece el gasto (opcional)
  user            User?    @relation(fields: [userId], references: [id])
  grupo           Grupo?   @relation(fields: [grupoId], references: [id])
}