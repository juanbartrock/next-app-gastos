generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String            @id @default(cuid())
  name              String?
  email             String?           @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  phoneNumber       String?
  accounts          Account[]
  financiaciones    Financiacion[]
  gastos            Gasto[]
  gastosRecurrentes GastoRecurrente[]
  gruposAdmin       Grupo[]           @relation("GrupoAdmin")
  grupos            GrupoMiembro[]
  presupuestos      Presupuesto[]
  servicios         Servicio[]
  sessions          Session[]
  inversiones       Inversion[]       // Relación con Inversiones
  tiposInversion    TipoInversion[]   // Relación con tipos de inversión personalizados
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Grupo {
  id          String         @id @default(cuid())
  nombre      String
  descripcion String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  adminId     String
  gastos      Gasto[]
  admin       User           @relation("GrupoAdmin", fields: [adminId], references: [id])
  miembros    GrupoMiembro[]
}

model GrupoMiembro {
  id        String   @id @default(cuid())
  grupoId   String
  userId    String
  rol       String   @default("miembro")
  createdAt DateTime @default(now())
  grupo     Grupo    @relation(fields: [grupoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([grupoId, userId])
}

model Gasto {
  id              Int           @id @default(autoincrement())
  concepto        String
  monto           Float
  fecha           DateTime      @default(now())
  categoria       String
  tipoTransaccion String        @default("expense")
  tipoMovimiento  String        @default("efectivo")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String?
  grupoId         String?
  categoriaId     Int?
  financiacion    Financiacion?
  categoriaRel    Categoria?    @relation(fields: [categoriaId], references: [id])
  grupo           Grupo?        @relation(fields: [grupoId], references: [id])
  user            User?         @relation(fields: [userId], references: [id])
  detalles        GastoDetalle[] // Relación con GastoDetalle
}

model Categoria {
  id                Int               @id @default(autoincrement())
  descripcion       String
  status            Boolean           @default(true)
  grupo_categoria   String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  gastos            Gasto[]
  gastosRecurrentes GastoRecurrente[]
  presupuestos      Presupuesto[]
}

model GastoRecurrente {
  id           Int        @id @default(autoincrement())
  concepto     String
  periodicidad String
  monto        Float
  comentario   String?
  estado       String     @default("pendiente")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String
  categoriaId  Int?
  proximaFecha DateTime?
  ultimoPago   DateTime?
  categoria    Categoria? @relation(fields: [categoriaId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
}

model Financiacion {
  id               Int       @id @default(autoincrement())
  gastoId          Int       @unique
  userId           String
  cantidadCuotas   Int
  cuotasPagadas    Int       @default(0)
  cuotasRestantes  Int
  montoCuota       Float
  fechaPrimerPago  DateTime?
  fechaProximoPago DateTime?
  diaPago          Int?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  gasto            Gasto     @relation(fields: [gastoId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id])
}

model Presupuesto {
  id          Int        @id @default(autoincrement())
  nombre      String
  monto       Float
  categoriaId Int?
  mes         Int // 1-12 para representar el mes
  año         Int
  userId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  categoria   Categoria? @relation(fields: [categoriaId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  
  @@unique([categoriaId, mes, año, userId])
}

model Servicio {
  id              Int       @id @default(autoincrement())
  nombre          String
  descripcion     String?
  monto           Float
  medioPago       String
  tarjeta         String?
  fechaCobro      DateTime?
  fechaVencimiento DateTime?
  userId          String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  promociones     Promocion[]
}

model Promocion {
  id                Int                    @id @default(autoincrement())
  titulo            String
  descripcion       String
  urlOrigen         String?
  descuento         Float?
  porcentajeAhorro  Float?
  fechaVencimiento  DateTime?
  fechaCreacion     DateTime               @default(now())
  fechaActualizacion DateTime              @updatedAt
  servicioId        Int?
  estado            String                 @default("active") // active, expired, used
  servicio          Servicio?              @relation(fields: [servicioId], references: [id], onDelete: SetNull)
  alternativas      ServicioAlternativo[]
}

model ServicioAlternativo {
  id              Int       @id @default(autoincrement())
  nombre          String
  descripcion     String?
  monto           Float
  urlOrigen       String?
  promocionId     Int
  promocion       Promocion @relation(fields: [promocionId], references: [id], onDelete: Cascade)
  fechaCreacion   DateTime  @default(now())
  fechaActualizacion DateTime @updatedAt
}

// Modelo para tipos de inversión
model TipoInversion {
  id            String      @id @default(cuid())
  nombre        String
  descripcion   String?
  icono         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  userId        String?     // Si es null, es un tipo predefinido del sistema
  inversiones   Inversion[]
  user          User?       @relation(fields: [userId], references: [id])

  @@unique([nombre, userId])
}

// Modelo para inversiones
model Inversion {
  id                String                @id @default(cuid())
  nombre            String
  descripcion       String?
  montoInicial      Float
  montoActual       Float
  rendimientoTotal  Float                 @default(0)
  rendimientoAnual  Float?                // Porcentaje estimado anual 
  fechaInicio       DateTime              @default(now())
  fechaVencimiento  DateTime?             // Para inversiones con plazo fijo
  estado            String                @default("activa") // activa, cerrada, vencida
  tipoId            String
  userId            String
  plataforma        String?               // Banco, broker, exchange, etc.
  notas             String?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  tipo              TipoInversion         @relation(fields: [tipoId], references: [id])
  user              User                  @relation(fields: [userId], references: [id])
  transacciones     TransaccionInversion[]
  cotizaciones      CotizacionInversion[]
}

// Modelo para transacciones de inversión (depósitos, retiros, dividendos, etc.)
model TransaccionInversion {
  id            String    @id @default(cuid())
  inversionId   String
  tipo          String    // deposito, retiro, dividendo, interes, comision
  monto         Float
  fecha         DateTime  @default(now())
  descripcion   String?
  comprobante   String?   // URL o referencia a un comprobante
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  inversion     Inversion @relation(fields: [inversionId], references: [id], onDelete: Cascade)
}

// Modelo para cotizaciones históricas de inversiones
model CotizacionInversion {
  id            String    @id @default(cuid())
  inversionId   String
  valor         Float     // Valor/precio unitario o total
  fecha         DateTime  @default(now())
  fuente        String?   // De dónde se obtuvo la cotización 
  createdAt     DateTime  @default(now())
  inversion     Inversion @relation(fields: [inversionId], references: [id], onDelete: Cascade)
  
  @@unique([inversionId, fecha]) // Solo una cotización por fecha para cada inversión
}

// Modelo para detalles de un gasto (ej. productos en un ticket)
model GastoDetalle {
  id            Int      @id @default(autoincrement())
  gastoId       Int      // Relación con el gasto principal
  descripcion   String   // Descripción del producto/servicio
  cantidad      Float    @default(1)
  precioUnitario Float?  // Precio por unidad si está disponible
  subtotal      Float    // Monto total de este ítem
  seguimiento   Boolean  @default(false) // Indicador para seguimiento de precios
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  gasto         Gasto    @relation(fields: [gastoId], references: [id], onDelete: Cascade)
}
