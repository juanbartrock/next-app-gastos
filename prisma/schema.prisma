generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                        String                     @id @default(cuid())
  name                      String?
  email                     String?                    @unique
  emailVerified             DateTime?
  image                     String?
  password                  String?
  phoneNumber               String?
  planId                    String?
  isAdmin                   Boolean                    @default(false)
  estado                    String?                    @default("activo")
  fechaRegistro             DateTime?                  @default(now())
  rolSistema                String?                    @default("usuario")
  ultimaActividad           DateTime?
  accounts                  Account[]
  alertas                   Alerta[]
  auditoriasAdmin           AuditoriaAdmin[]
  categoriasPersonales      Categoria[]                @relation("CategoriasPersonales")
  configuracionAlertas      ConfiguracionAlerta[]
  financiaciones            Financiacion[]
  gastos                    Gasto[]
  gastosRecurrentes         GastoRecurrente[]
  gruposAdmin               Grupo[]                    @relation("GrupoAdmin")
  grupos                    GrupoMiembro[]
  inversiones               Inversion[]
  pagosTarjeta              PagoTarjeta[]
  prestamos                 Prestamo[]
  presupuestos              Presupuesto[]
  servicios                 Servicio[]
  sessions                  Session[]
  suscripciones             Suscripcion[]
  tareas                    Tarea[]
  tiposInversion            TipoInversion[]
  plan                      Plan?                      @relation(fields: [planId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usosMensuales             UsoMensual[]
  comprobantesPendientes    ComprobantePendiente[]
  comprobantesTransferencia ComprobanteTransferencia[]
  pagosSuscripcionMP        PagoSuscripcionMP[]
  configuracionMercadoPago  ConfiguracionMercadoPago?
  usosCodigosPromocionales UsoCodigoPromocional[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Grupo {
  id          String         @id @default(cuid())
  nombre      String
  descripcion String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  adminId     String
  admin       User           @relation("GrupoAdmin", fields: [adminId], references: [id])
  miembros    GrupoMiembro[]
}

model GrupoMiembro {
  id                 String      @id @default(cuid())
  grupoId            String
  userId             String
  rol                String      @default("miembro")
  createdAt          DateTime    @default(now())
  fechaIncorporacion DateTime    @default(now())
  puedeEditarGrupo   Boolean     @default(false)
  puedeVerFamiliar   Boolean     @default(false)
  rolFamiliar        RolFamiliar @default(MIEMBRO_LIMITADO)
  grupo              Grupo       @relation(fields: [grupoId], references: [id], onDelete: Cascade)
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([grupoId, userId])
}

model Gasto {
  id                       Int                       @id @default(autoincrement())
  concepto                 String
  monto                    Float
  fecha                    DateTime                  @default(now())
  categoria                String
  tipoTransaccion          String                    @default("expense")
  tipoMovimiento           String                    @default("efectivo")
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  userId                   String
  categoriaId              Int?
  incluirEnFamilia         Boolean                   @default(true)
  fechaImputacion          DateTime?
  gastoRecurrenteId        Int?
  origenComprobante        String?
  financiacion             Financiacion?
  categoriaRel             Categoria?                @relation(fields: [categoriaId], references: [id])
  gastoRecurrente          GastoRecurrente?          @relation("GastoGenerado", fields: [gastoRecurrenteId], references: [id])
  user                     User                      @relation(fields: [userId], references: [id])
  detalles                 GastoDetalle[]
  pagoTarjeta              PagoTarjeta?              @relation("PagoTarjetaGasto")
  comprobanteTransferencia ComprobanteTransferencia?
}

model Categoria {
  id                Int               @id @default(autoincrement())
  descripcion       String
  status            Boolean           @default(true)
  grupo_categoria   String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  colorHex          String?
  icono             String?
  userId            String?           // Para categorías personales (NULL = genérica del sistema)
  esPrivada         Boolean           @default(false)  // Solo visible para el creador
  
  // Relaciones
  propietario       User?             @relation("CategoriasPersonales", fields: [userId], references: [id], onDelete: Cascade)
  gastos            Gasto[]
  gastosRecurrentes GastoRecurrente[]
  presupuestos      Presupuesto[]
}

model GastoRecurrente {
  id              Int        @id @default(autoincrement())
  concepto        String
  periodicidad    String
  monto           Float
  comentario      String?
  estado          String     @default("pendiente")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  userId          String
  categoriaId     Int?
  proximaFecha    DateTime?
  ultimoPago      DateTime?
  esServicio      Boolean    @default(false)
  servicioId      Int?       @unique
  tipoMovimiento  String     @default("efectivo")
  alertas         Alerta[]
  gastosGenerados Gasto[]    @relation("GastoGenerado")
  categoria       Categoria? @relation(fields: [categoriaId], references: [id])
  servicio        Servicio?  @relation(fields: [servicioId], references: [id])
  user            User       @relation(fields: [userId], references: [id])
  tareas          Tarea[]
}

model Financiacion {
  id               Int                  @id @default(autoincrement())
  gastoId          Int                  @unique
  userId           String
  cantidadCuotas   Int
  cuotasPagadas    Int                  @default(0)
  cuotasRestantes  Int
  montoCuota       Float
  fechaPrimerPago  DateTime?
  fechaProximoPago DateTime?
  diaPago          Int?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  cuotasVinculadas CuotaVinculada[]
  gasto            Gasto                @relation(fields: [gastoId], references: [id], onDelete: Cascade)
  user             User                 @relation(fields: [userId], references: [id])
  tarjetaInfo      FinanciacionTarjeta?
}

model FinanciacionTarjeta {
  id                Int          @id @default(autoincrement())
  financiacionId    Int          @unique
  tarjetaEspecifica String
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  financiacion      Financiacion @relation(fields: [financiacionId], references: [id], onDelete: Cascade)
}

model PagoTarjeta {
  id                String           @id @default(cuid())
  concepto          String
  monto             Float
  fecha             DateTime         @default(now())
  tipoMovimiento    String           @default("digital")
  tarjetaEspecifica String
  userId            String
  gastoId           Int              @unique
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  cuotasVinculadas  CuotaVinculada[]
  gasto             Gasto            @relation("PagoTarjetaGasto", fields: [gastoId], references: [id], onDelete: Cascade)
  user              User             @relation(fields: [userId], references: [id])
}

model CuotaVinculada {
  id               String       @id @default(cuid())
  financiacionId   Int
  pagoTarjetaId    String
  montoCuota       Float
  fechaVinculacion DateTime     @default(now())
  createdAt        DateTime     @default(now())
  financiacion     Financiacion @relation(fields: [financiacionId], references: [id], onDelete: Cascade)
  pagoTarjeta      PagoTarjeta  @relation(fields: [pagoTarjetaId], references: [id], onDelete: Cascade)

  @@unique([financiacionId, pagoTarjetaId])
}

model Plan {
  id              String              @id @default(cuid())
  nombre          String
  descripcion     String?
  esPago          Boolean             @default(false)
  precioMensual   Float?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now()) @updatedAt
  activo          Boolean             @default(true)
  colorHex        String?
  features        String?
  limitaciones    Json?
  ordenDisplay    Int?                @default(0)
  trialDias       Int?                @default(0)
  funcionalidades FuncionalidadPlan[]
  limites         LimitePlan[]
  suscripciones   Suscripcion[]
  usuarios        User[]
  pagosSuscripcionMP PagoSuscripcionMP[]
  codigosPromocionales CodigoPromocional[]
}

model Funcionalidad {
  id          String              @id @default(cuid())
  nombre      String
  descripcion String?
  slug        String              @unique
  icono       String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @default(now()) @updatedAt
  planes      FuncionalidadPlan[]
}

model FuncionalidadPlan {
  id              String        @id @default(cuid())
  planId          String
  funcionalidadId String
  activo          Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  funcionalidad   Funcionalidad @relation(fields: [funcionalidadId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  plan            Plan          @relation(fields: [planId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([planId, funcionalidadId])
}

model Prestamo {
  id                String         @id @default(cuid())
  entidadFinanciera String
  tipoCredito       String
  montoSolicitado   Float
  montoAprobado     Float
  montoDesembolsado Float
  saldoActual       Float
  tasaInteres       Float
  plazoMeses        Int
  cuotaMensual      Float
  cuotasPagadas     Int            @default(0)
  cuotasPendientes  Int
  fechaDesembolso   DateTime
  fechaPrimeraCuota DateTime
  fechaProximaCuota DateTime?
  fechaVencimiento  DateTime
  diaPago           Int?
  estado            String         @default("activo")
  proposito         String?
  garantia          String?
  seguroVida        Boolean        @default(false)
  seguroDesempleo   Boolean        @default(false)
  comisiones        Float?         @default(0)
  gastosNotariales  Float?         @default(0)
  numeroCredito     String?
  observaciones     String?
  documentos        String?
  userId            String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  alertas           Alerta[]
  pagos             PagoPrestamo[]
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tareas            Tarea[]
}

model PagoPrestamo {
  id               String   @id @default(cuid())
  prestamoId       String
  numeroCuota      Int
  montoPagado      Float
  montoCapital     Float
  montoInteres     Float
  montoSeguro      Float?   @default(0)
  montoComision    Float?   @default(0)
  fechaPago        DateTime
  fechaVencimiento DateTime
  diasMora         Int?     @default(0)
  interesMora      Float?   @default(0)
  metodoPago       String?
  comprobante      String?
  observaciones    String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  prestamo         Prestamo @relation(fields: [prestamoId], references: [id], onDelete: Cascade)
}

model Presupuesto {
  id          String    @id @default(cuid())
  nombre      String
  monto       Float
  mes         Int
  año        Int
  categoriaId Int
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  alertas     Alerta[]
  categoria   Categoria @relation(fields: [categoriaId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tareas      Tarea[]

  @@unique([userId, categoriaId, mes, año])
}

model Servicio {
  id               Int              @id @default(autoincrement())
  nombre           String
  descripcion      String?
  monto            Float
  medioPago        String
  tarjeta          String?
  fechaCobro       DateTime?
  fechaVencimiento DateTime?
  userId           String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  generaRecurrente Boolean          @default(false)
  gastoRecurrente  GastoRecurrente?
  promociones      Promocion[]
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Promocion {
  id                 Int                   @id @default(autoincrement())
  titulo             String
  descripcion        String
  urlOrigen          String?
  descuento          Float?
  porcentajeAhorro   Float?
  fechaVencimiento   DateTime?
  fechaCreacion      DateTime              @default(now())
  fechaActualizacion DateTime              @updatedAt
  servicioId         Int?
  estado             String                @default("active")
  alertas            Alerta[]
  servicio           Servicio?             @relation(fields: [servicioId], references: [id])
  alternativas       ServicioAlternativo[]
}

model ServicioAlternativo {
  id                 Int       @id @default(autoincrement())
  nombre             String
  descripcion        String?
  monto              Float
  urlOrigen          String?
  promocionId        Int
  fechaCreacion      DateTime  @default(now())
  fechaActualizacion DateTime  @updatedAt
  promocion          Promocion @relation(fields: [promocionId], references: [id], onDelete: Cascade)
}

model TipoInversion {
  id          String      @id @default(cuid())
  nombre      String
  descripcion String?
  icono       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String?
  inversiones Inversion[]
  user        User?       @relation(fields: [userId], references: [id])

  @@unique([nombre, userId])
}

model Inversion {
  id               String                 @id @default(cuid())
  nombre           String
  descripcion      String?
  montoInicial     Float
  montoActual      Float
  rendimientoTotal Float                  @default(0)
  rendimientoAnual Float?
  fechaInicio      DateTime               @default(now())
  fechaVencimiento DateTime?
  estado           String                 @default("activa")
  tipoId           String
  userId           String
  plataforma       String?
  notas            String?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  alertas          Alerta[]
  cotizaciones     CotizacionInversion[]
  tipo             TipoInversion          @relation(fields: [tipoId], references: [id])
  user             User                   @relation(fields: [userId], references: [id])
  tareas           Tarea[]
  transacciones    TransaccionInversion[]
}

model TransaccionInversion {
  id          String    @id @default(cuid())
  inversionId String
  tipo        String
  monto       Float
  fecha       DateTime  @default(now())
  descripcion String?
  comprobante String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  inversion   Inversion @relation(fields: [inversionId], references: [id], onDelete: Cascade)
}

model CotizacionInversion {
  id          String    @id @default(cuid())
  inversionId String
  valor       Float
  fecha       DateTime  @default(now())
  fuente      String?
  createdAt   DateTime  @default(now())
  inversion   Inversion @relation(fields: [inversionId], references: [id], onDelete: Cascade)

  @@unique([inversionId, fecha])
}

model GastoDetalle {
  id             Int      @id @default(autoincrement())
  gastoId        Int
  descripcion    String
  cantidad       Float    @default(1)
  precioUnitario Float?
  subtotal       Float
  seguimiento    Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  gasto          Gasto    @relation(fields: [gastoId], references: [id], onDelete: Cascade)
}

model Tarea {
  id                String           @id @default(cuid())
  titulo            String
  descripcion       String?
  fechaVencimiento  DateTime?
  prioridad         String           @default("media")
  estado            String           @default("pendiente")
  esFinanciera      Boolean          @default(false)
  categoria         String?
  recordatorio      DateTime?
  completadaEn      DateTime?
  prestamoId        String?
  gastoRecurrenteId Int?
  inversionId       String?
  presupuestoId     String?
  userId            String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  alertas           Alerta[]
  gastoRecurrente   GastoRecurrente? @relation(fields: [gastoRecurrenteId], references: [id], onDelete: Cascade)
  inversion         Inversion?       @relation(fields: [inversionId], references: [id], onDelete: Cascade)
  prestamo          Prestamo?        @relation(fields: [prestamoId], references: [id], onDelete: Cascade)
  presupuesto       Presupuesto?     @relation(fields: [presupuestoId], references: [id], onDelete: Cascade)
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Alerta {
  id                  String              @id @default(cuid())
  userId              String
  tipo                TipoAlerta
  prioridad           PrioridadAlerta
  titulo              String
  mensaje             String
  metadatos           Json?
  leida               Boolean             @default(false)
  accionado           Boolean             @default(false)
  fechaCreacion       DateTime            @default(now())
  fechaExpiracion     DateTime?
  canales             CanalNotificacion[]
  accionesDisponibles Json?
  gastoRecurrenteId   Int?
  prestamoId          String?
  inversionId         String?
  presupuestoId       String?
  tareaId             String?
  promocionId         Int?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  gastoRecurrente     GastoRecurrente?    @relation(fields: [gastoRecurrenteId], references: [id])
  inversion           Inversion?          @relation(fields: [inversionId], references: [id])
  prestamo            Prestamo?           @relation(fields: [prestamoId], references: [id])
  presupuesto         Presupuesto?        @relation(fields: [presupuestoId], references: [id])
  promocion           Promocion?          @relation(fields: [promocionId], references: [id])
  tarea               Tarea?              @relation(fields: [tareaId], references: [id])
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, fechaCreacion])
  @@index([userId, leida])
  @@index([tipo, fechaCreacion])
}

model ConfiguracionAlerta {
  id                  String                 @id @default(cuid())
  userId              String
  tipoAlerta          TipoAlerta
  habilitado          Boolean                @default(true)
  canales             CanalNotificacion[]
  frecuencia          FrecuenciaNotificacion @default(INMEDIATA)
  horarioInicio       String?
  horarioFin          String?
  diasSemana          Int[]
  montoMinimo         Float?
  categoriasExcluidas String[]
  configuracionExtra  Json?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  user                User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tipoAlerta])
  @@index([userId, habilitado])
}

model ComprobanteTransferencia {
  id                  String    @id @default(cuid())
  userId              String
  nombreArchivo       String
  tipoArchivo         String
  tamanioArchivo      Int
  rutaArchivo         String?
  fecha               DateTime
  monto               Float
  moneda              String    @default("ARS")
  bancoEmisor         String?
  cuentaOrigen        String?
  cuentaDestino       String?
  cbuOrigen           String?
  cbuDestino          String?
  aliasOrigen         String?
  aliasDestino        String?
  concepto            String?
  numeroOperacion     String?
  comision            Float?    @default(0)
  estadoProcesamiento String    @default("pendiente")
  confianzaExtraccion Float?
  erroresDetectados   String?
  datosOriginalesOCR  String?
  gastoGeneradoId     Int?      @unique
  fechaSubida         DateTime  @default(now())
  fechaProcesado      DateTime?
  fechaDescartado     DateTime?
  gastoGenerado       Gasto?    @relation(fields: [gastoGeneradoId], references: [id])
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, estadoProcesamiento])
  @@index([userId, fechaSubida])
  @@map("comprobantes_transferencia")
}

model ComprobantePendiente {
  id                     String    @id @default(cuid())
  userId                 String
  nombreArchivo          String
  tipoDetectado          String
  confianzaClasificacion Float
  contenidoBase64        String
  tamaño                Int
  metadatos              Json?
  estado                 String    @default("pendiente")
  datosExtraidos         Json?
  errorProcesamiento     String?
  fechaSubida            DateTime  @default(now())
  fechaProcesado         DateTime?
  fechaConfirmado        DateTime?
  fechaDescartado        DateTime?
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, estado])
  @@index([userId, fechaSubida])
  @@index([estado, fechaSubida])
  @@map("comprobantes_pendientes")
}

model AlertaExecution {
  id         String   @id @default(cuid())
  type       String
  executedAt DateTime
  metadata   Json?
  createdAt  DateTime @default(now())

  @@index([type, executedAt])
  @@index([executedAt])
  @@map("alerta_executions")
}

model Suscripcion {
  id               String    @id @default(cuid())
  userId           String
  planId           String
  fechaInicio      DateTime  @default(now())
  fechaVencimiento DateTime?
  estado           String    @default("activa")
  metodoPago       String?
  referenciaPago   String?
  autoRenovacion   Boolean   @default(true)
  montoMensual     Float?
  montoTotal       Float?
  fechaProximoPago DateTime?
  intentosFallidos Int       @default(0)
  observaciones    String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  plan             Plan      @relation(fields: [planId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  pagosMercadoPago PagoSuscripcionMP[]
  usosCodigosPromocionales UsoCodigoPromocional[]

  @@index([userId, estado])
  @@index([estado, fechaVencimiento])
  @@index([planId, estado])
}

model LimitePlan {
  id           String   @id @default(cuid())
  planId       String
  nombreLimite String
  valorLimite  Int
  tipo         String
  unidad       String?
  descripcion  String?
  activo       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  plan         Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)

  @@unique([planId, nombreLimite])
  @@index([planId, activo])
}

model AuditoriaAdmin {
  id              String   @id @default(cuid())
  adminId         String
  accion          String
  entidadAfectada String
  entidadId       String
  datosAnteriores Json?
  datosNuevos     Json?
  descripcion     String?
  ipAddress       String?
  userAgent       String?
  resultadoExito  Boolean  @default(true)
  errorMensaje    String?
  fechaAccion     DateTime @default(now())
  admin           User     @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId, fechaAccion])
  @@index([accion, fechaAccion])
  @@index([entidadAfectada, entidadId])
}

model UsoMensual {
  id                   String    @id @default(cuid())
  userId               String
  año                 Int
  mes                  Int
  transaccionesCreadas Int       @default(0)
  alertasGeneradas     Int       @default(0)
  exportacionesCSV     Int       @default(0)
  consultasIA          Int       @default(0)
  storageUsadoMB       Int       @default(0)
  sesionesInicidas     Int       @default(0)
  tiempoAppMinutos     Int       @default(0)
  fechaUltimaActividad DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, año, mes])
  @@index([userId, año, mes])
  @@index([año, mes])
}

// ✅ MODELOS MERCADOPAGO PARA SUSCRIPCIONES
model PagoSuscripcionMP {
  id                  String                   @id @default(cuid())
  userId              String
  suscripcionId       String
  planId              String
  concepto            String                   // "Suscripción Plan Básico - Enero 2025"
  monto               Float                    // 4.99, 9.99, etc.
  
  // Datos específicos de MercadoPago
  mpPaymentId         Int?                     @unique
  mpPreferenceId      String?
  mpStatus            EstadoPagoMP             @default(PENDING)
  mpPaymentType       TipoPagoMP?
  mpPaymentMethod     String?
  mpExternalReference String                   @unique
  
  // Metadatos de suscripción
  tipoPago            String                   // "inicial", "renovacion", "upgrade", "downgrade"
  mesFacturado        Int                      // Mes que se está pagando
  añoFacturado       Int                      // Año que se está pagando
  fechaVencimiento    DateTime?                // Cuándo vence esta suscripción
  
  // Timestamps
  fechaCreacion       DateTime                 @default(now())
  fechaPago           DateTime?
  fechaProcesado      DateTime?
  fechaActualizacion  DateTime                 @updatedAt
  
  // Datos adicionales de MercadoPago
  mpCollectorId       Int?
  mpNotificationUrl   String?
  mpStatementDescriptor String?                @default("App Gastos - Suscripcion")
  
  // Relaciones CORRECTAS para monetización
  user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  suscripcion         Suscripcion              @relation(fields: [suscripcionId], references: [id], onDelete: Cascade)
  plan                Plan                     @relation(fields: [planId], references: [id])
  
  // Historial de webhooks
  webhooks            WebhookMercadoPago[]
  
  @@index([userId, mpStatus])
  @@index([suscripcionId])
  @@index([mpPaymentId])
  @@index([mpExternalReference])
  @@index([fechaCreacion])
  @@index([tipoPago, fechaCreacion])
  @@map("pagos_suscripcion_mp")
}

model WebhookMercadoPago {
  id                String           @id @default(cuid())
  pagoSuscripcionId String
  
  // Datos del webhook
  mpResource        String           // Ej: "payment"
  mpTopic           String           // Ej: "payment"
  mpId              String           // ID del recurso en MP
  mpUserId          String?          // Usuario de MP
  mpLiveMode        Boolean          @default(true)
  
  // Data completa del webhook
  webhookData       Json             // Data completa recibida
  responseStatus    Int?             // Status de respuesta que enviamos
  procesado         Boolean          @default(false)
  fechaRecibido     DateTime         @default(now())
  fechaProcesado    DateTime?
  errorProceso      String?
  
  // Relación CORREGIDA para suscripciones
  pagoSuscripcion   PagoSuscripcionMP @relation(fields: [pagoSuscripcionId], references: [id], onDelete: Cascade)
  
  @@index([pagoSuscripcionId])
  @@index([mpResource, mpId])
  @@index([procesado, fechaRecibido])
  @@map("webhooks_mercadopago")
}

model ConfiguracionMercadoPago {
  id                      String           @id @default(cuid())
  userId                  String           @unique
  
  // Configuración de pagos
  autoGenararGastos       Boolean          @default(true)
  notificarPagosAprobados Boolean          @default(true)
  notificarPagosRechazados Boolean         @default(true)
  
  // Configuración de gastos recurrentes
  autoMarcarRecurrentesPagados Boolean     @default(true)
  
  // Configuración de préstamos  
  autoRegistrarCuotasPrestamos Boolean     @default(false)
  
  // URLs personalizadas (opcional)
  urlExitoPersonalizada   String?
  urlFalloPersonalizada   String?
  urlPendientePersonalizada String?
  
  // Timestamps
  createdAt               DateTime         @default(now())
  updatedAt               DateTime         @updatedAt
  
  // Relación
  user                    User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("configuracion_mercadopago")
}

// ✅ SISTEMA DE CÓDIGOS PROMOCIONALES
model CodigoPromocional {
  id                String   @id @default(cuid())
  codigo            String   @unique              // Ej: "PREMIUM2025", "EARLY_ADOPTER"
  planId            String                        // Plan que otorga
  tipoDescuento     String                        // "gratuito", "descuento_porcentaje", "descuento_monto"
  valorDescuento    Float?                        // 50.0 para 50% off, 5.0 para $5 off, null para gratuito
  duracionMeses     Int?                          // Duración del beneficio en meses, null = permanente
  
  // Restricciones de uso
  usosMaximos       Int?                          // Máximo número de usos, null = ilimitado
  usosActuales      Int                 @default(0)
  fechaVencimiento  DateTime?                     // Cuándo expira el código
  
  // Información adicional
  descripcion       String?                       // "Plan Premium gratuito por 6 meses"
  creadoPor         String?                       // Email del admin que lo creó
  activo            Boolean             @default(true)
  
  // Metadatos
  esPermanente      Boolean             @default(false)    // true para códigos de lifetime
  esPublico         Boolean             @default(false)    // true para códigos promocionales públicos
  
  // Timestamps
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relaciones
  plan              Plan                @relation(fields: [planId], references: [id])
  usos              UsoCodigoPromocional[]
  
  @@index([codigo, activo])
  @@index([fechaVencimiento, activo])
}

model UsoCodigoPromocional {
  id                      String            @id @default(cuid())
  codigoPromocionalId     String
  userId                  String
  suscripcionId           String?           // Suscripción creada por este código
  
  // Información del uso
  fechaUso                DateTime          @default(now())
  ipAddress               String?
  userAgent               String?
  
  // Relaciones
  codigoPromocional       CodigoPromocional @relation(fields: [codigoPromocionalId], references: [id], onDelete: Cascade)
  user                    User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  suscripcion             Suscripcion?      @relation(fields: [suscripcionId], references: [id])
  
  @@unique([codigoPromocionalId, userId])  // Un usuario solo puede usar un código una vez
  @@index([userId, fechaUso])
  @@index([codigoPromocionalId, fechaUso])
}

enum RolFamiliar {
  ADMINISTRADOR_FAMILIAR
  MIEMBRO_COMPLETO
  MIEMBRO_LIMITADO
  MIEMBRO_RESTRINGIDO
}

enum TipoAlerta {
  PAGO_RECURRENTE
  PRESUPUESTO_80
  PRESUPUESTO_90
  PRESUPUESTO_SUPERADO
  META_PROGRESO
  INVERSION_VENCIMIENTO
  PRESTAMO_CUOTA
  GASTO_INUSUAL
  OPORTUNIDAD_AHORRO
  SALDO_BAJO
  RECOMENDACION_IA
  TAREA_VENCIMIENTO
  PROMOCION_DISPONIBLE
}

enum PrioridadAlerta {
  BAJA
  MEDIA
  ALTA
  CRITICA
}

enum CanalNotificacion {
  IN_APP
  EMAIL
  SMS
  WHATSAPP
  PUSH
}

enum FrecuenciaNotificacion {
  INMEDIATA
  DIARIA
  SEMANAL
  MENSUAL
  PERSONALIZADA
}

enum RolSistema {
  USUARIO
  ADMIN_GRUPO
  ADMIN_GENERAL
}

enum EstadoUsuario {
  ACTIVO
  SUSPENDIDO
  INACTIVO
  BLOQUEADO
}

enum EstadoSuscripcion {
  ACTIVA
  VENCIDA
  CANCELADA
  SUSPENDIDA
  TRIAL
}

enum TipoLimite {
  CANTIDAD
  STORAGE
  FUNCIONALIDAD
  TIEMPO
}

// ✅ ENUMS MERCADOPAGO ESPECÍFICOS ARGENTINA
enum EstadoPagoMP {
  PENDING     // Pendiente
  APPROVED    // Aprobado
  REJECTED    // Rechazado
  CANCELLED   // Cancelado
  IN_PROCESS  // En proceso
  REFUNDED    // Reembolsado
}

enum TipoPagoMP {
  CREDIT_CARD      // Tarjeta de crédito
  DEBIT_CARD       // Tarjeta de débito
  CASH             // Efectivo (Pago Fácil, Rapipago, etc.)
  BANK_TRANSFER    // Transferencia bancaria
  DIGITAL_WALLET   // Billetera digital (dinero en cuenta MP)
  OTHER           // Otros métodos
}
