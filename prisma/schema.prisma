generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                   String                @id @default(cuid())
  name                 String?
  email                String?               @unique
  emailVerified        DateTime?
  image                String?
  password             String?
  phoneNumber          String?
  planId               String?
  isAdmin              Boolean               @default(false)
  accounts             Account[]
  alertas              Alerta[]
  configuracionAlertas ConfiguracionAlerta[]
  financiaciones       Financiacion[]
  gastos               Gasto[]
  gastosRecurrentes    GastoRecurrente[]
  gruposAdmin          Grupo[]               @relation("GrupoAdmin")
  grupos               GrupoMiembro[]
  inversiones          Inversion[]
  pagosTarjeta         PagoTarjeta[]         // Nueva relación
  prestamos            Prestamo[]
  presupuestos         Presupuesto[]
  servicios            Servicio[]
  sessions             Session[]
  tareas               Tarea[]
  tiposInversion       TipoInversion[]
  comprobantesTransferencia ComprobanteTransferencia[]
  comprobantesPendientes ComprobantePendiente[]
  plan                 Plan?                 @relation(fields: [planId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Grupo {
  id          String         @id @default(cuid())
  nombre      String
  descripcion String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  adminId     String
  admin       User           @relation("GrupoAdmin", fields: [adminId], references: [id])
  miembros    GrupoMiembro[]
}

model GrupoMiembro {
  id                 String      @id @default(cuid())
  grupoId            String
  userId             String
  rol                String      @default("miembro")
  createdAt          DateTime    @default(now())
  fechaIncorporacion DateTime    @default(now())
  puedeEditarGrupo   Boolean     @default(false)
  puedeVerFamiliar   Boolean     @default(false)
  rolFamiliar        RolFamiliar @default(MIEMBRO_LIMITADO)
  grupo              Grupo       @relation(fields: [grupoId], references: [id], onDelete: Cascade)
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([grupoId, userId])
}

model Gasto {
  id                Int              @id @default(autoincrement())
  concepto          String
  monto             Float
  fecha             DateTime         @default(now())
  categoria         String
  tipoTransaccion   String           @default("expense")
  tipoMovimiento    String           @default("efectivo")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  userId            String
  categoriaId       Int?
  incluirEnFamilia  Boolean          @default(true)
  fechaImputacion   DateTime?
  gastoRecurrenteId Int?
  origenComprobante String?
  financiacion      Financiacion?
  pagoTarjeta       PagoTarjeta?     @relation("PagoTarjetaGasto")
  categoriaRel      Categoria?       @relation(fields: [categoriaId], references: [id])
  gastoRecurrente   GastoRecurrente? @relation("GastoGenerado", fields: [gastoRecurrenteId], references: [id])
  user              User             @relation(fields: [userId], references: [id])
  detalles          GastoDetalle[]
  comprobanteTransferencia ComprobanteTransferencia?
}

model Categoria {
  id                Int               @id @default(autoincrement())
  descripcion       String
  status            Boolean           @default(true)
  grupo_categoria   String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  gastos            Gasto[]
  gastosRecurrentes GastoRecurrente[]
  presupuestos      Presupuesto[]
}

model GastoRecurrente {
  id              Int        @id @default(autoincrement())
  concepto        String
  periodicidad    String
  monto           Float
  comentario      String?
  estado          String     @default("pendiente")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  userId          String
  categoriaId     Int?
  proximaFecha    DateTime?
  ultimoPago      DateTime?
  esServicio      Boolean    @default(false)
  servicioId      Int?       @unique
  tipoMovimiento  String     @default("efectivo")
  alertas         Alerta[]
  gastosGenerados Gasto[]    @relation("GastoGenerado")
  categoria       Categoria? @relation(fields: [categoriaId], references: [id])
  servicio        Servicio?  @relation(fields: [servicioId], references: [id])
  user            User       @relation(fields: [userId], references: [id])
  tareas          Tarea[]
}

model Financiacion {
  id                 Int                      @id @default(autoincrement())
  gastoId            Int                      @unique
  userId             String
  cantidadCuotas     Int
  cuotasPagadas      Int                      @default(0)
  cuotasRestantes    Int
  montoCuota         Float
  fechaPrimerPago    DateTime?
  fechaProximoPago   DateTime?
  diaPago            Int?
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  gasto              Gasto                    @relation(fields: [gastoId], references: [id], onDelete: Cascade)
  user               User                     @relation(fields: [userId], references: [id])
  cuotasVinculadas   CuotaVinculada[]         // Cuotas ya pagadas
  tarjetaInfo        FinanciacionTarjeta?     // Información específica de tarjeta (opcional)
}

model FinanciacionTarjeta {
  id                Int       @id @default(autoincrement())
  financiacionId    Int       @unique // Relación 1:1 con financiacion existente
  tarjetaEspecifica String    // "Visa Macro", "Visa Ciudad", "Mastercard BBVA"
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  financiacion      Financiacion @relation(fields: [financiacionId], references: [id], onDelete: Cascade)
}

model PagoTarjeta {
  id                String              @id @default(cuid())
  concepto          String              // "Pago Tarjeta Visa Macro"
  monto             Float
  fecha             DateTime            @default(now())
  tipoMovimiento    String              @default("digital")
  tarjetaEspecifica String              // "Visa Macro", "Visa Ciudad", "Mastercard BBVA"
  userId            String
  gastoId           Int                 @unique // Vinculado al gasto real del pago
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  gasto             Gasto               @relation("PagoTarjetaGasto", fields: [gastoId], references: [id], onDelete: Cascade)
  user              User                @relation(fields: [userId], references: [id])
  cuotasVinculadas  CuotaVinculada[]    // Cuotas que se pagaron con este pago
}

model CuotaVinculada {
  id               String         @id @default(cuid())
  financiacionId   Int
  pagoTarjetaId    String
  montoCuota       Float          // Monto de esta cuota específica
  fechaVinculacion DateTime       @default(now())
  createdAt        DateTime       @default(now())
  
  financiacion     Financiacion   @relation(fields: [financiacionId], references: [id], onDelete: Cascade)
  pagoTarjeta      PagoTarjeta    @relation(fields: [pagoTarjetaId], references: [id], onDelete: Cascade)
  
  @@unique([financiacionId, pagoTarjetaId])
}

model Plan {
  id              String              @id @default(cuid())
  nombre          String
  descripcion     String?
  esPago          Boolean             @default(false)
  precioMensual   Float?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now()) @updatedAt
  funcionalidades FuncionalidadPlan[]
  usuarios        User[]
}

model Funcionalidad {
  id          String              @id @default(cuid())
  nombre      String
  descripcion String?
  slug        String              @unique
  icono       String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @default(now()) @updatedAt
  planes      FuncionalidadPlan[]
}

model FuncionalidadPlan {
  id              String        @id @default(cuid())
  planId          String
  funcionalidadId String
  activo          Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  funcionalidad   Funcionalidad @relation(fields: [funcionalidadId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  plan            Plan          @relation(fields: [planId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([planId, funcionalidadId])
}

model Prestamo {
  id                String         @id @default(cuid())
  entidadFinanciera String
  tipoCredito       String
  montoSolicitado   Float
  montoAprobado     Float
  montoDesembolsado Float
  saldoActual       Float
  tasaInteres       Float
  plazoMeses        Int
  cuotaMensual      Float
  cuotasPagadas     Int            @default(0)
  cuotasPendientes  Int
  fechaDesembolso   DateTime
  fechaPrimeraCuota DateTime
  fechaProximaCuota DateTime?
  fechaVencimiento  DateTime
  diaPago           Int?
  estado            String         @default("activo")
  proposito         String?
  garantia          String?
  seguroVida        Boolean        @default(false)
  seguroDesempleo   Boolean        @default(false)
  comisiones        Float?         @default(0)
  gastosNotariales  Float?         @default(0)
  numeroCredito     String?
  observaciones     String?
  documentos        String?
  userId            String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  alertas           Alerta[]
  pagos             PagoPrestamo[]
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  tareas            Tarea[]
}

model PagoPrestamo {
  id               String   @id @default(cuid())
  prestamoId       String
  numeroCuota      Int
  montoPagado      Float
  montoCapital     Float
  montoInteres     Float
  montoSeguro      Float?   @default(0)
  montoComision    Float?   @default(0)
  fechaPago        DateTime
  fechaVencimiento DateTime
  diasMora         Int?     @default(0)
  interesMora      Float?   @default(0)
  metodoPago       String?
  comprobante      String?
  observaciones    String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  prestamo         Prestamo @relation(fields: [prestamoId], references: [id], onDelete: Cascade)
}

model Presupuesto {
  id          String    @id @default(cuid())
  nombre      String
  monto       Float
  mes         Int
  año        Int
  categoriaId Int
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  alertas     Alerta[]
  categoria   Categoria @relation(fields: [categoriaId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tareas      Tarea[]

  @@unique([userId, categoriaId, mes, año])
}

model Servicio {
  id               Int              @id @default(autoincrement())
  nombre           String
  descripcion      String?
  monto            Float
  medioPago        String
  tarjeta          String?
  fechaCobro       DateTime?
  fechaVencimiento DateTime?
  userId           String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  generaRecurrente Boolean          @default(false)
  gastoRecurrente  GastoRecurrente?
  promociones      Promocion[]
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Promocion {
  id                 Int                   @id @default(autoincrement())
  titulo             String
  descripcion        String
  urlOrigen          String?
  descuento          Float?
  porcentajeAhorro   Float?
  fechaVencimiento   DateTime?
  fechaCreacion      DateTime              @default(now())
  fechaActualizacion DateTime              @updatedAt
  servicioId         Int?
  estado             String                @default("active")
  alertas            Alerta[]
  servicio           Servicio?             @relation(fields: [servicioId], references: [id])
  alternativas       ServicioAlternativo[]
}

model ServicioAlternativo {
  id                 Int       @id @default(autoincrement())
  nombre             String
  descripcion        String?
  monto              Float
  urlOrigen          String?
  promocionId        Int
  fechaCreacion      DateTime  @default(now())
  fechaActualizacion DateTime  @updatedAt
  promocion          Promocion @relation(fields: [promocionId], references: [id], onDelete: Cascade)
}

model TipoInversion {
  id          String      @id @default(cuid())
  nombre      String
  descripcion String?
  icono       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String?
  inversiones Inversion[]
  user        User?       @relation(fields: [userId], references: [id])

  @@unique([nombre, userId])
}

model Inversion {
  id               String                 @id @default(cuid())
  nombre           String
  descripcion      String?
  montoInicial     Float
  montoActual      Float
  rendimientoTotal Float                  @default(0)
  rendimientoAnual Float?
  fechaInicio      DateTime               @default(now())
  fechaVencimiento DateTime?
  estado           String                 @default("activa")
  tipoId           String
  userId           String
  plataforma       String?
  notas            String?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  alertas          Alerta[]
  cotizaciones     CotizacionInversion[]
  tipo             TipoInversion          @relation(fields: [tipoId], references: [id])
  user             User                   @relation(fields: [userId], references: [id])
  tareas           Tarea[]
  transacciones    TransaccionInversion[]
}

model TransaccionInversion {
  id          String    @id @default(cuid())
  inversionId String
  tipo        String
  monto       Float
  fecha       DateTime  @default(now())
  descripcion String?
  comprobante String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  inversion   Inversion @relation(fields: [inversionId], references: [id], onDelete: Cascade)
}

model CotizacionInversion {
  id          String    @id @default(cuid())
  inversionId String
  valor       Float
  fecha       DateTime  @default(now())
  fuente      String?
  createdAt   DateTime  @default(now())
  inversion   Inversion @relation(fields: [inversionId], references: [id], onDelete: Cascade)

  @@unique([inversionId, fecha])
}

model GastoDetalle {
  id             Int      @id @default(autoincrement())
  gastoId        Int
  descripcion    String
  cantidad       Float    @default(1)
  precioUnitario Float?
  subtotal       Float
  seguimiento    Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  gasto          Gasto    @relation(fields: [gastoId], references: [id], onDelete: Cascade)
}

model Tarea {
  id                String           @id @default(cuid())
  titulo            String
  descripcion       String?
  fechaVencimiento  DateTime?
  prioridad         String           @default("media")
  estado            String           @default("pendiente")
  esFinanciera      Boolean          @default(false)
  categoria         String?
  recordatorio      DateTime?
  completadaEn      DateTime?
  prestamoId        String?
  gastoRecurrenteId Int?
  inversionId       String?
  presupuestoId     String?
  userId            String
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  alertas           Alerta[]
  gastoRecurrente   GastoRecurrente? @relation(fields: [gastoRecurrenteId], references: [id], onDelete: Cascade)
  inversion         Inversion?       @relation(fields: [inversionId], references: [id], onDelete: Cascade)
  prestamo          Prestamo?        @relation(fields: [prestamoId], references: [id], onDelete: Cascade)
  presupuesto       Presupuesto?     @relation(fields: [presupuestoId], references: [id], onDelete: Cascade)
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Alerta {
  id                  String              @id @default(cuid())
  userId              String
  tipo                TipoAlerta
  prioridad           PrioridadAlerta
  titulo              String
  mensaje             String
  metadatos           Json?
  leida               Boolean             @default(false)
  accionado           Boolean             @default(false)
  fechaCreacion       DateTime            @default(now())
  fechaExpiracion     DateTime?
  canales             CanalNotificacion[]
  accionesDisponibles Json?
  gastoRecurrenteId   Int?
  prestamoId          String?
  inversionId         String?
  presupuestoId       String?
  tareaId             String?
  promocionId         Int?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  gastoRecurrente     GastoRecurrente?    @relation(fields: [gastoRecurrenteId], references: [id])
  inversion           Inversion?          @relation(fields: [inversionId], references: [id])
  prestamo            Prestamo?           @relation(fields: [prestamoId], references: [id])
  presupuesto         Presupuesto?        @relation(fields: [presupuestoId], references: [id])
  promocion           Promocion?          @relation(fields: [promocionId], references: [id])
  tarea               Tarea?              @relation(fields: [tareaId], references: [id])
  user                User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, fechaCreacion])
  @@index([userId, leida])
  @@index([tipo, fechaCreacion])
}

model ConfiguracionAlerta {
  id                  String                 @id @default(cuid())
  userId              String
  tipoAlerta          TipoAlerta
  habilitado          Boolean                @default(true)
  canales             CanalNotificacion[]
  frecuencia          FrecuenciaNotificacion @default(INMEDIATA)
  horarioInicio       String?
  horarioFin          String?
  diasSemana          Int[]
  montoMinimo         Float?
  categoriasExcluidas String[]
  configuracionExtra  Json?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  user                User                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tipoAlerta])
  @@index([userId, habilitado])
}

enum RolFamiliar {
  ADMINISTRADOR_FAMILIAR
  MIEMBRO_COMPLETO
  MIEMBRO_LIMITADO
  MIEMBRO_RESTRINGIDO
}

enum TipoAlerta {
  PAGO_RECURRENTE
  PRESUPUESTO_80
  PRESUPUESTO_90
  PRESUPUESTO_SUPERADO
  META_PROGRESO
  INVERSION_VENCIMIENTO
  PRESTAMO_CUOTA
  GASTO_INUSUAL
  OPORTUNIDAD_AHORRO
  SALDO_BAJO
  RECOMENDACION_IA
  TAREA_VENCIMIENTO
  PROMOCION_DISPONIBLE
}

enum PrioridadAlerta {
  BAJA
  MEDIA
  ALTA
  CRITICA
}

enum CanalNotificacion {
  IN_APP
  EMAIL
  SMS
  WHATSAPP
  PUSH
}

enum FrecuenciaNotificacion {
  INMEDIATA
  DIARIA
  SEMANAL
  MENSUAL
  PERSONALIZADA
}

model ComprobanteTransferencia {
  id              String   @id @default(cuid())
  userId          String
  
  nombreArchivo   String
  tipoArchivo     String
  tamanioArchivo  Int
  rutaArchivo     String?
  
  fecha           DateTime
  monto           Float
  moneda          String   @default("ARS")
  bancoEmisor     String?
  cuentaOrigen    String?
  cuentaDestino   String?
  cbuOrigen       String?
  cbuDestino      String?
  aliasOrigen     String?
  aliasDestino    String?
  concepto        String?
  numeroOperacion String?
  comision        Float?   @default(0)
  
  estadoProcesamiento String @default("pendiente")
  confianzaExtraccion Float?
  erroresDetectados   String?
  datosOriginalesOCR  String?
  
  gastoGeneradoId Int?     @unique
  gastoGenerado   Gasto?   @relation(fields: [gastoGeneradoId], references: [id])
  
  fechaSubida     DateTime @default(now())
  fechaProcesado  DateTime?
  fechaDescartado DateTime?
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("comprobantes_transferencia")
  @@index([userId, estadoProcesamiento])
  @@index([userId, fechaSubida])
}

model ComprobantePendiente {
  id                     String   @id @default(cuid())
  userId                 String
  
  nombreArchivo          String
  tipoDetectado          String   // 'transferencia', 'ticket', 'servicio', 'resumen_tarjeta', 'desconocido'
  confianzaClasificacion Float    // 0-100
  contenidoBase64        String   @db.Text
  tamaño                 Int
  metadatos              Json?
  
  estado                 String   @default("pendiente") // 'pendiente', 'procesando', 'confirmado', 'descartado'
  
  // Datos extraídos temporalmente (JSON)
  datosExtraidos         Json?
  errorProcesamiento     String?
  
  fechaSubida            DateTime @default(now())
  fechaProcesado         DateTime?
  fechaConfirmado        DateTime?
  fechaDescartado        DateTime?
  
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("comprobantes_pendientes")
  @@index([userId, estado])
  @@index([userId, fechaSubida])
  @@index([estado, fechaSubida])
}

model AlertaExecution {
  id          String   @id @default(cuid())
  type        String   // 'SMART_TRIGGER', 'CRON_JOB', 'MANUAL'
  executedAt  DateTime
  metadata    Json?    // Configuración y datos adicionales
  createdAt   DateTime @default(now())

  @@map("alerta_executions")
  @@index([type, executedAt])
  @@index([executedAt])
}
