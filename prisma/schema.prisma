generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String            @id @default(cuid())
  name              String?
  email             String?           @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  phoneNumber       String?
  planId            String?
  isAdmin           Boolean           @default(false)
  accounts          Account[]
  financiaciones    Financiacion[]
  gastos            Gasto[]
  gastosRecurrentes GastoRecurrente[]
  gruposAdmin       Grupo[]           @relation("GrupoAdmin")
  grupos            GrupoMiembro[]
  sessions          Session[]
  prestamos         Prestamo[]        // Relación con Préstamos
  presupuestos      Presupuesto[]     // Relación con Presupuestos
  tareas            Tarea[]           // Relación con Tareas
  servicios         Servicio[]        // Relación con Servicios
  tiposInversion    TipoInversion[]   // Relación con Tipos de Inversión personalizados
  inversiones       Inversion[]       // Relación con Inversiones
  alertas           Alerta[]          // Relación con Alertas
  configuracionAlertas ConfiguracionAlerta[] // Relación con Configuraciones de Alertas
  plan              Plan?             @relation(fields: [planId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Grupo {
  id          String         @id @default(cuid())
  nombre      String
  descripcion String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  adminId     String
  gastos      Gasto[]
  admin       User           @relation("GrupoAdmin", fields: [adminId], references: [id])
  miembros    GrupoMiembro[]
}

model GrupoMiembro {
  id        String   @id @default(cuid())
  grupoId   String
  userId    String
  rol       String   @default("miembro")
  createdAt DateTime @default(now())
  grupo     Grupo    @relation(fields: [grupoId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([grupoId, userId])
}

model Gasto {
  id              Int             @id @default(autoincrement())
  concepto        String
  monto           Float
  fecha           DateTime        @default(now())
  categoria       String
  tipoTransaccion String          @default("expense")
  tipoMovimiento  String          @default("efectivo")
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  userId          String?
  grupoId         String?
  categoriaId     Int?
  financiacion    Financiacion?
  categoriaRel    Categoria?      @relation(fields: [categoriaId], references: [id])
  grupo           Grupo?          @relation(fields: [grupoId], references: [id])
  user            User?           @relation(fields: [userId], references: [id])
  detalles        GastoDetalle[]  // Relación con detalles del gasto
}

model Categoria {
  id                Int               @id @default(autoincrement())
  descripcion       String
  status            Boolean           @default(true)
  grupo_categoria   String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  gastos            Gasto[]
  gastosRecurrentes GastoRecurrente[]
  presupuestos      Presupuesto[]
}

model GastoRecurrente {
  id           Int        @id @default(autoincrement())
  concepto     String
  periodicidad String
  monto        Float
  comentario   String?
  estado       String     @default("pendiente")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  userId       String
  categoriaId  Int?
  proximaFecha DateTime?
  ultimoPago   DateTime?
  esServicio   Boolean    @default(false) // Marca si este gasto recurrente es también un servicio
  servicioId   Int?       @unique // Relación opcional con Servicio (único para relación 1:1)
  categoria    Categoria? @relation(fields: [categoriaId], references: [id])
  user         User       @relation(fields: [userId], references: [id])
  servicio     Servicio?  @relation(fields: [servicioId], references: [id])
  tareas       Tarea[]    // Relación con Tareas
  alertas      Alerta[]   // Relación con Alertas
}

model Financiacion {
  id               Int       @id @default(autoincrement())
  gastoId          Int       @unique
  userId           String
  cantidadCuotas   Int
  cuotasPagadas    Int       @default(0)
  cuotasRestantes  Int
  montoCuota       Float
  fechaPrimerPago  DateTime?
  fechaProximoPago DateTime?
  diaPago          Int?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  gasto            Gasto     @relation(fields: [gastoId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id])
}

model Plan {
  id              String              @id @default(cuid())
  nombre          String
  descripcion     String?
  esPago          Boolean             @default(false)
  precioMensual   Float?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now()) @updatedAt
  funcionalidades FuncionalidadPlan[]
  usuarios        User[]
}

model Funcionalidad {
  id          String              @id @default(cuid())
  nombre      String
  descripcion String?
  slug        String              @unique
  icono       String?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @default(now()) @updatedAt
  planes      FuncionalidadPlan[]
}

model FuncionalidadPlan {
  id              String        @id @default(cuid())
  planId          String
  funcionalidadId String
  activo          Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  funcionalidad   Funcionalidad @relation(fields: [funcionalidadId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  plan            Plan          @relation(fields: [planId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([planId, funcionalidadId])
}

// Modelo para préstamos obtenidos de entidades financieras
model Prestamo {
  id                    String    @id @default(cuid())
  entidadFinanciera     String    // Banco, cooperativa, financiera, etc.
  tipoCredito           String    // personal, hipotecario, vehicular, comercial, etc.
  montoSolicitado       Float     // Monto original del préstamo
  montoAprobado         Float     // Monto aprobado (puede ser diferente al solicitado)
  montoDesembolsado     Float     // Monto efectivamente recibido
  saldoActual           Float     // Saldo pendiente de pago
  tasaInteres           Float     // Tasa de interés anual (%)
  plazoMeses            Int       // Plazo total en meses
  cuotaMensual          Float     // Valor de la cuota mensual
  cuotasPagadas         Int       @default(0) // Número de cuotas pagadas
  cuotasPendientes      Int       // Número de cuotas pendientes
  fechaDesembolso       DateTime  // Fecha en que se recibió el dinero
  fechaPrimeraCuota     DateTime  // Fecha de la primera cuota
  fechaProximaCuota     DateTime? // Fecha de la próxima cuota a pagar
  fechaVencimiento      DateTime  // Fecha de vencimiento del préstamo
  diaPago               Int?      // Día del mes para el pago (1-31)
  estado                String    @default("activo") // activo, pagado, vencido, refinanciado
  proposito             String?   // Para qué se solicitó el préstamo
  garantia              String?   // Tipo de garantía (hipotecaria, prendaria, fiador, etc.)
  seguroVida            Boolean   @default(false) // Si incluye seguro de vida
  seguroDesempleo       Boolean   @default(false) // Si incluye seguro de desempleo
  comisiones            Float?    @default(0) // Comisiones adicionales
  gastosNotariales      Float?    @default(0) // Gastos notariales y legales
  numeroCredito         String?   // Número de crédito asignado por la entidad
  observaciones         String?   // Observaciones adicionales
  documentos            String?   // URLs o referencias a documentos relacionados
  userId                String    // Usuario propietario del préstamo
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  pagos                 PagoPrestamo[] // Relación con los pagos realizados
  tareas                Tarea[]   // Relación con Tareas
  alertas               Alerta[]  // Relación con Alertas
}

// Modelo para registrar los pagos realizados a préstamos
model PagoPrestamo {
  id                String    @id @default(cuid())
  prestamoId        String    // Relación con el préstamo
  numeroCuota       Int       // Número de cuota pagada
  montoPagado       Float     // Monto efectivamente pagado
  montoCapital      Float     // Porción que va a capital
  montoInteres      Float     // Porción que va a intereses
  montoSeguro       Float?    @default(0) // Porción de seguros si aplica
  montoComision     Float?    @default(0) // Comisiones adicionales
  fechaPago         DateTime  // Fecha en que se realizó el pago
  fechaVencimiento  DateTime  // Fecha de vencimiento de esta cuota
  diasMora          Int?      @default(0) // Días de mora si aplica
  interesMora       Float?    @default(0) // Intereses por mora
  metodoPago        String?   // Efectivo, transferencia, débito automático, etc.
  comprobante       String?   // Número de comprobante o referencia
  observaciones     String?   // Observaciones del pago
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  prestamo          Prestamo  @relation(fields: [prestamoId], references: [id], onDelete: Cascade)
}

// Modelo para presupuestos mensuales por categoría
model Presupuesto {
  id          String     @id @default(cuid())
  nombre      String     // Nombre descriptivo del presupuesto
  monto       Float      // Monto presupuestado
  mes         Int        // Mes del presupuesto (1-12)
  año         Int        // Año del presupuesto
  categoriaId Int        // Categoría asociada
  userId      String     // Usuario propietario del presupuesto
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  categoria   Categoria  @relation(fields: [categoriaId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tareas      Tarea[]    // Relación con Tareas
  alertas     Alerta[]   // Relación con Alertas

  @@unique([userId, categoriaId, mes, año])
}

// Modelo para servicios contratados (suscripciones, servicios mensuales, etc.)
model Servicio {
  id                  Int               @id @default(autoincrement())
  nombre              String            // Nombre del servicio
  descripcion         String?           // Descripción del servicio
  monto               Float             // Monto del servicio
  medioPago           String            // Medio de pago (efectivo, tarjeta, débito automático, etc.)
  tarjeta             String?           // Tarjeta utilizada si aplica
  fechaCobro          DateTime?         // Fecha de cobro
  fechaVencimiento    DateTime?         // Fecha de vencimiento
  generaRecurrente    Boolean           @default(false) // Marca si este servicio genera un gasto recurrente
  userId              String            // Usuario propietario del servicio
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  user                User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  gastoRecurrente     GastoRecurrente?  // Relación inversa (sin campos, Prisma la maneja automáticamente)
  promociones         Promocion[]       // Relación con promociones
}

// Modelo para promociones y ofertas de servicios
model Promocion {
  id                 Int                    @id @default(autoincrement())
  titulo             String                 // Título de la promoción
  descripcion        String                 // Descripción de la promoción
  urlOrigen          String?                // URL de origen de la promoción
  descuento          Float?                 // Descuento en monto fijo
  porcentajeAhorro   Float?                 // Porcentaje de ahorro
  fechaVencimiento   DateTime?              // Fecha de vencimiento de la promoción
  fechaCreacion      DateTime               @default(now())
  fechaActualizacion DateTime               @updatedAt
  servicioId         Int?                   // Servicio asociado (opcional)
  estado             String                 @default("active") // active, expired, used
  servicio           Servicio?              @relation(fields: [servicioId], references: [id], onDelete: SetNull)
  alternativas       ServicioAlternativo[]  // Servicios alternativos asociados
  alertas            Alerta[]               // Relación con Alertas
}

// Modelo para servicios alternativos (para comparación)
model ServicioAlternativo {
  id                 Int        @id @default(autoincrement())
  nombre             String     // Nombre del servicio alternativo
  descripcion        String?    // Descripción del servicio
  monto              Float      // Monto del servicio alternativo
  urlOrigen          String?    // URL de origen
  promocionId        Int        // Promoción asociada
  fechaCreacion      DateTime   @default(now())
  fechaActualizacion DateTime   @updatedAt
  promocion          Promocion  @relation(fields: [promocionId], references: [id], onDelete: Cascade)
}

// Modelo para tipos de inversión
model TipoInversion {
  id          String      @id @default(cuid())
  nombre      String      // Nombre del tipo de inversión
  descripcion String?     // Descripción del tipo
  icono       String?     // Icono para representación visual
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String?     // Usuario propietario (null para tipos predefinidos)
  user        User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  inversiones Inversion[] // Inversiones de este tipo

  @@unique([nombre, userId])
}

// Modelo para inversiones financieras
model Inversion {
  id                 String                  @id @default(cuid())
  nombre             String                  // Nombre de la inversión
  descripcion        String?                 // Descripción de la inversión
  montoInicial       Float                   // Monto inicial invertido
  montoActual        Float                   // Monto actual de la inversión
  rendimientoTotal   Float                   @default(0) // Rendimiento total acumulado
  rendimientoAnual   Float?                  // Rendimiento anual estimado
  fechaInicio        DateTime                @default(now()) // Fecha de inicio de la inversión
  fechaVencimiento   DateTime?               // Fecha de vencimiento (si aplica)
  estado             String                  @default("activa") // activa, cerrada, vencida
  tipoId             String                  // Tipo de inversión
  userId             String                  // Usuario propietario
  plataforma         String?                 // Plataforma donde se realiza la inversión
  notas              String?                 // Notas adicionales
  createdAt          DateTime                @default(now())
  updatedAt          DateTime                @updatedAt
  tipo               TipoInversion           @relation(fields: [tipoId], references: [id], onDelete: Restrict)
  user               User                    @relation(fields: [userId], references: [id], onDelete: Restrict)
  transacciones      TransaccionInversion[]  // Transacciones de la inversión
  cotizaciones       CotizacionInversion[]   // Cotizaciones históricas
  tareas             Tarea[]                 // Relación con Tareas
  alertas            Alerta[]                // Relación con Alertas
}

// Modelo para transacciones de inversión
model TransaccionInversion {
  id           String    @id @default(cuid())
  inversionId  String    // Inversión asociada
  tipo         String    // deposito, retiro, dividendo, interes, comision
  monto        Float     // Monto de la transacción
  fecha        DateTime  @default(now()) // Fecha de la transacción
  descripcion  String?   // Descripción de la transacción
  comprobante  String?   // Comprobante o referencia
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  inversion    Inversion @relation(fields: [inversionId], references: [id], onDelete: Cascade)
}

// Modelo para cotizaciones históricas de inversiones
model CotizacionInversion {
  id          String    @id @default(cuid())
  inversionId String    // Inversión asociada
  valor       Float     // Valor/precio de la inversión
  fecha       DateTime  @default(now()) // Fecha de la cotización
  fuente      String?   // Fuente de la cotización
  createdAt   DateTime  @default(now())
  inversion   Inversion @relation(fields: [inversionId], references: [id], onDelete: Cascade)

  @@unique([inversionId, fecha])
}

// Modelo para detalles de gastos (productos en un ticket)
model GastoDetalle {
  id             Int      @id @default(autoincrement())
  gastoId        Int      // Gasto principal asociado
  descripcion    String   // Descripción del producto/servicio
  cantidad       Float    @default(1) // Cantidad del producto
  precioUnitario Float?   // Precio unitario (opcional)
  subtotal       Float    // Subtotal del producto
  seguimiento    Boolean  @default(false) // Si se hace seguimiento de precio
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  gasto          Gasto    @relation(fields: [gastoId], references: [id], onDelete: Cascade)
}

// Modelo para tareas y recordatorios
model Tarea {
  id                 String            @id @default(cuid())
  titulo             String            // Título de la tarea
  descripcion        String?           // Descripción detallada
  fechaVencimiento   DateTime?         // Fecha de vencimiento (opcional)
  prioridad          String            @default("media") // alta, media, baja
  estado             String            @default("pendiente") // pendiente, completada, cancelada
  esFinanciera       Boolean           @default(false) // Si es una tarea financiera
  categoria          String?           // Categoría de la tarea (finanzas, personal, hogar, etc.)
  recordatorio       DateTime?         // Fecha/hora de recordatorio
  completadaEn       DateTime?         // Fecha de completado
  
  // Relaciones opcionales (solo para tareas financieras)
  prestamoId         String?
  gastoRecurrenteId  Int?
  inversionId        String?
  presupuestoId      String?
  
  // Campos generales
  userId             String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  
  // Relaciones
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  prestamo           Prestamo?         @relation(fields: [prestamoId], references: [id], onDelete: Cascade)
  gastoRecurrente    GastoRecurrente?  @relation(fields: [gastoRecurrenteId], references: [id], onDelete: Cascade)
  inversion          Inversion?        @relation(fields: [inversionId], references: [id], onDelete: Cascade)
  presupuesto        Presupuesto?      @relation(fields: [presupuestoId], references: [id], onDelete: Cascade)
  alertas            Alerta[]          // Relación con Alertas
}

// === SISTEMA DE ALERTAS MEJORADO ===

// Tipos de alerta disponibles
enum TipoAlerta {
  PAGO_RECURRENTE
  PRESUPUESTO_80
  PRESUPUESTO_90
  PRESUPUESTO_SUPERADO
  META_PROGRESO
  INVERSION_VENCIMIENTO
  PRESTAMO_CUOTA
  GASTO_INUSUAL
  OPORTUNIDAD_AHORRO
  SALDO_BAJO
  RECOMENDACION_IA
  TAREA_VENCIMIENTO
  PROMOCION_DISPONIBLE
}

// Prioridades de alerta
enum PrioridadAlerta {
  BAJA
  MEDIA
  ALTA
  CRITICA
}

// Canales de notificación
enum CanalNotificacion {
  IN_APP
  EMAIL
  SMS
  WHATSAPP
  PUSH
}

// Frecuencias de notificación
enum FrecuenciaNotificacion {
  INMEDIATA
  DIARIA
  SEMANAL
  MENSUAL
  PERSONALIZADA
}

// Modelo principal de alertas
model Alerta {
  id                  String               @id @default(cuid())
  userId              String               // Usuario propietario de la alerta
  tipo                TipoAlerta           // Tipo de alerta
  prioridad           PrioridadAlerta      // Prioridad de la alerta
  titulo              String               // Título de la alerta
  mensaje             String               // Mensaje detallado
  metadatos           Json?                // Datos adicionales (montos, IDs, etc.)
  leida               Boolean              @default(false) // Si fue leída por el usuario
  accionado           Boolean              @default(false) // Si se tomó alguna acción
  fechaCreacion       DateTime             @default(now()) // Fecha de creación
  fechaExpiracion     DateTime?            // Fecha de expiración (opcional)
  canales             CanalNotificacion[]  // Canales donde se envió
  accionesDisponibles Json?                // Acciones disponibles para la alerta
  
  // Relaciones opcionales con elementos específicos
  gastoRecurrenteId   Int?
  prestamoId          String?
  inversionId         String?
  presupuestoId       String?
  tareaId             String?
  promocionId         Int?
  
  // Campos de auditoria
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  
  // Relaciones
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  gastoRecurrente     GastoRecurrente?     @relation(fields: [gastoRecurrenteId], references: [id], onDelete: SetNull)
  prestamo            Prestamo?            @relation(fields: [prestamoId], references: [id], onDelete: SetNull)
  inversion           Inversion?           @relation(fields: [inversionId], references: [id], onDelete: SetNull)
  presupuesto         Presupuesto?         @relation(fields: [presupuestoId], references: [id], onDelete: SetNull)
  tarea               Tarea?               @relation(fields: [tareaId], references: [id], onDelete: SetNull)
  promocion           Promocion?           @relation(fields: [promocionId], references: [id], onDelete: SetNull)
  
  @@index([userId, fechaCreacion])
  @@index([userId, leida])
  @@index([tipo, fechaCreacion])
}

// Configuración de alertas por usuario
model ConfiguracionAlerta {
  id                  String                   @id @default(cuid())
  userId              String                   // Usuario propietario
  tipoAlerta          TipoAlerta               // Tipo de alerta a configurar
  habilitado          Boolean                  @default(true) // Si este tipo de alerta está habilitado
  canales             CanalNotificacion[]      // Canales preferidos para este tipo
  frecuencia          FrecuenciaNotificacion   @default(INMEDIATA) // Frecuencia de notificación
  
  // Configuración de horarios
  horarioInicio       String?                  // Hora de inicio (formato HH:MM)
  horarioFin          String?                  // Hora de fin (formato HH:MM)
  diasSemana          Int[]                    // Días de la semana (0=domingo, 6=sábado)
  
  // Filtros específicos
  montoMinimo         Float?                   // Monto mínimo para triggear la alerta
  categoriasExcluidas String[]                 // IDs de categorías excluidas
  
  // Configuración específica por tipo de alerta
  configuracionExtra  Json?                    // Configuración específica (umbrales, etc.)
  
  // Campos de auditoria
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  
  // Relaciones
  user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, tipoAlerta])
  @@index([userId, habilitado])
}
