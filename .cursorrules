# Cursor Rules para Aplicación de Gestión de Gastos

## Información del Proyecto
- **Aplicación**: Sistema de gestión de gastos personales y grupales
- **Stack**: Next.js 15, React 18, TypeScript, Prisma, PostgreSQL (Neon), NextAuth.js, OpenAI
- **UI**: TailwindCSS, Shadcn/ui, Lucide React
- **Base de datos**: PostgreSQL unificada (desarrollo y producción con Neon)
- **🖥️ ENTORNO**: Windows 10/11 con PowerShell - NUNCA usar comandos de Linux/Bash
- **🚨 PROHIBIDO**: Borrar, truncar o eliminar datos de la base de datos bajo cualquier circunstancia

## 🚀 HOJA DE RUTA DE DESARROLLO 
> **Estado**: ✅ **PROYECTO 100% COMPLETADO** - 3 FASES + GASTOS RECURRENTES IMPLEMENTADOS
> 
> **Referencia**: Ver `DOCUMENTACION.md`, `GASTOS_RECURRENTES_COMPLETADO.md` y `PROYECTO_COMPLETADO_FINAL.md`

### **✅ TODAS LAS FASES COMPLETADAS - Enero 2025**

#### **✅ FASE 1 COMPLETADA - Sistema de Alertas Avanzado**
- ✅ Modelo `Alerta` y `ConfiguracionAlerta` en Prisma
- ✅ APIs completas para gestión de alertas (`/api/alertas/*`)
- ✅ `NotificationCenter` implementado y funcionando
- ✅ Página dedicada `/alertas` con tabs (Activas, Historial, Configuración)
- ✅ Centro de notificaciones persistente en header
- ✅ 13 tipos de alerta implementados
- ✅ 4 niveles de prioridad con iconos y colores
- ✅ Integración completa con VisibilityContext y ThemeProvider
- ✅ Sin duplicación de headers
- ✅ Acciones completas: marcar leída, accionar, eliminar

#### **✅ FASE 2 COMPLETADA - Motor Automático de Alertas**
- ✅ `AlertEngine` para evaluación automática de condiciones (8 tipos)
- ✅ `AlertScheduler` con patrón Singleton para programación automática
- ✅ APIs de control (`/api/alertas/evaluate`, `/api/alertas/scheduler`)
- ✅ Panel de administración en `/admin/alertas`
- ✅ Página de pruebas `/test-fase2` completamente funcional
- ✅ Alertas automáticas de presupuestos (80%, 90%, 100% usado)
- ✅ Sistema de programación de evaluaciones cada 60 minutos
- ✅ Detección automática de gastos inusuales/anómalos
- ✅ Configuración granular completa por usuario

#### **✅ FASE 3 COMPLETADA - Inteligencia Artificial**
- ✅ `AIAnalyzer` con integración OpenAI completa
- ✅ 5 APIs de IA (`/api/ai/*`) funcionando correctamente
- ✅ Centro de IA `/ai-financiero` con componentes especializados
- ✅ Página de pruebas `/test-fase3` completamente funcional
- ✅ Integración OpenAI para análisis de patrones (GPT-3.5-turbo, GPT-4o-mini)
- ✅ Recomendaciones personalizadas de ahorro con impacto económico
- ✅ Alertas predictivas basadas en tendencias
- ✅ Reportes inteligentes automáticos mensuales
- ✅ Detección de anomalías y gastos inusuales

#### **✅ SISTEMA DE GASTOS RECURRENTES COMPLETADO - Enero 2025**
- ✅ **Asociación bidireccional** entre transacciones y gastos recurrentes
- ✅ **Estados automáticos**: pendiente → pago_parcial → pagado
- ✅ **Selector en formularios** de creación y edición de transacciones
- ✅ **Información visual** del impacto de pagos y saldos pendientes
- ✅ **Generación automática** de pagos desde gastos recurrentes
- ✅ **Relaciones padre-hijo** con campo `gastoRecurrenteId`
- ✅ **API optimizada** `/api/gastos/recurrentes-disponibles`
- ✅ **Transacciones atómicas** para garantizar consistencia
- ✅ **Compatibilidad Next.js 15** con `await params`
- ✅ **Manejo de timeouts** optimizado para Neon PostgreSQL

### **🎯 ESTADO ACTUAL: LISTO PARA PRODUCCIÓN**

#### **Funcionalidades Principales Implementadas** ✅
- ✅ Sistema básico de gestión de gastos y transacciones
- ✅ Autenticación con NextAuth.js
- ✅ Dashboard con visibilidad de valores (botón ojo)
- ✅ Tema oscuro por defecto
- ✅ Sistema de presupuestos con alertas automáticas
- ✅ Gestión de préstamos e inversiones con alertas
- ✅ Panel de administración completo
- ✅ Sistema de scraping para promociones
- ✅ **Sistema de tareas personales y financieras**
- ✅ **SISTEMA DE ALERTAS COMPLETO (FASE 1)**
- ✅ **MOTOR AUTOMÁTICO DE ALERTAS (FASE 2)**
- ✅ **INTELIGENCIA ARTIFICIAL INTEGRADA (FASE 3)**
- ✅ **GASTOS RECURRENTES CON ASOCIACIÓN AUTOMÁTICA**
- ✅ **MODO FAMILIAR PARA ADMINISTRADORES** - Toggle personal/familiar con control de permisos

#### **Próximas Expansiones Sugeridas (FASE 4+)**
- [ ] Gamificación (badges, streaks, logros)
- [ ] Widgets personalizables en dashboard
- [ ] PWA con notificaciones push
- [ ] Integraciones bancarias argentinas (Mercado Pago, etc.)
- [ ] Chat AI conversacional 24/7
- [ ] Internacionalización para otros países latinoamericanos

### Reglas Específicas para Mantenimiento 🔔 ✅

#### Patrones de Implementación Completados ✅
```typescript
// Modelo base para alertas - IMPLEMENTADO Y FUNCIONAL
interface Alerta {
  id: string
  userId: string
  tipo: TipoAlerta
  prioridad: PrioridadAlerta
  titulo: string
  mensaje: string
  leida: boolean
  accionado: boolean
  fechaCreacion: Date
  fechaExpiracion?: Date
  metadatos?: Record<string, any>
  // Relaciones opcionales
  gastoRecurrenteId?: number
  prestamoId?: string
  inversionId?: string
  presupuestoId?: string
  tareaId?: string
  promocionId?: number
}

// Engine de evaluación de alertas - IMPLEMENTADO Y FUNCIONAL
class AlertEngine {
  async evaluateConditions(userId: string): Promise<Alerta[]>
  async processPresupuestosAlerts(userId: string): Promise<Alerta[]>
  async analyzePatterns(userId: string): Promise<Alerta[]>
  async runAutomaticEvaluation(userId: string): Promise<number>
}

// Motor de Inteligencia Artificial - IMPLEMENTADO Y FUNCIONAL
class AIAnalyzer {
  async analizarPatrones(userId: string, meses: number): Promise<PatronesAnalisis>
  async generarRecomendaciones(userId: string): Promise<RecomendacionIA[]>
  async detectarAnomalias(userId: string): Promise<AnomaliaDetectada[]>
  async generarReporte(userId: string): Promise<ReporteInteligente>
  async predecirAlertas(userId: string): Promise<AlertaPredictiva[]>
}

// Sistema de Gastos Recurrentes - IMPLEMENTADO Y FUNCIONAL
model Gasto {
  gastoRecurrenteId  Int?              @map("gastoRecurrenteId")
  gastoRecurrente    GastoRecurrente?  @relation(fields: [gastoRecurrenteId], references: [id])
}

model GastoRecurrente {
  gastosGenerados   Gasto[]           @relation()
  estado           String            // 'pendiente', 'pago_parcial', 'pagado'
}
```

#### Componentes UI Estándar ✅
```typescript
// NotificationCenter en header - IMPLEMENTADO Y FUNCIONAL
export function NotificationCenter() {
  const { alertas, stats } = useAlertas()
  const { valuesVisible } = useVisibility()
  return (
    <DropdownMenu>
      <Bell />
      <Badge>{stats.noLeidas}</Badge>
      {/* Lista de alertas con acciones */}
    </DropdownMenu>
  )
}

// AlertsList para gestión completa - IMPLEMENTADO Y FUNCIONAL
export function AlertsList({ alertas, onMarcarLeida, onEliminar }) {
  // Componente completo con filtros, acciones y estados
}

// Componentes de IA - IMPLEMENTADOS Y FUNCIONALES
export function PatronesAnalisis() {
  // Análisis de patrones con OpenAI
}

export function RecomendacionesIA() {
  // Recomendaciones personalizadas
}

// Selector de Gastos Recurrentes - IMPLEMENTADO Y FUNCIONAL
export function GastoRecurrenteSelector({ value, onChange, gastosRecurrentes }) {
  return (
    <Select value={value || "none"} onValueChange={onChange}>
      <SelectTrigger>
        <SelectValue placeholder="Seleccionar gasto recurrente" />
      </SelectTrigger>
      <SelectContent>
        <SelectItem value="none">Sin asociar</SelectItem>
        {gastosRecurrentes.map(recurrente => (
          <SelectItem key={recurrente.id} value={recurrente.id.toString()}>
            {recurrente.concepto} - ${recurrente.monto.toLocaleString()}
            {recurrente.estado === 'pago_parcial' && 
              ` (${recurrente.porcentajePagado.toFixed(1)}% pagado)`
            }
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  )
}
```

#### APIs Implementadas y Funcionales ✅
- ✅ `GET /api/alertas` - Listar alertas con filtros y paginación
- ✅ `POST /api/alertas` - Crear nueva alerta  
- ✅ `PUT /api/alertas/[id]` - Actualizar alerta
- ✅ `DELETE /api/alertas/[id]` - Eliminar alerta
- ✅ `GET/PUT /api/alertas/config` - Configuraciones de usuario
- ✅ `POST /api/alertas/test` - Crear alertas de prueba (con CORS)
- ✅ `POST /api/alertas/evaluate` - Evaluación automática de condiciones
- ✅ `GET /api/alertas/scheduler` - Estado del scheduler automático
- ✅ `POST /api/alertas/scheduler` - Control del scheduler (start/stop/runOnce)
- ✅ `GET /api/ai/analizar-patrones` - Análisis de patrones con IA
- ✅ `GET /api/ai/recomendaciones` - Recomendaciones personalizadas
- ✅ `GET /api/ai/alertas-predictivas` - Alertas predictivas
- ✅ `GET /api/ai/reporte-inteligente` - Reportes ejecutivos con IA
- ✅ `GET /api/ai/detectar-anomalias` - Detección de gastos anómalos
- ✅ `POST /api/gastos` - Crear transacción con soporte para gastoRecurrenteId
- ✅ `PUT /api/gastos/[id]` - Editar transacción con manejo de asociaciones
- ✅ `GET /api/gastos/recurrentes-disponibles` - Lista optimizada para selector
- ✅ `GET /api/gastos/familiares` - Transacciones familiares para administradores
- ✅ `POST /api/recurrentes/[id]/generar-pago` - Generación automática

## Estructura del Proyecto
```
src/
├── app/                    # App Router de Next.js
│   ├── api/               # API Routes
│   │   ├── ai/            # ✅ APIs de Inteligencia Artificial (FASE 3)
│   │   ├── alertas/       # ✅ Sistema de alertas completo (FASE 1+2)
│   │   ├── gastos/        # ✅ Gestión de transacciones + gastos recurrentes
│   │   │   ├── [id]/      # ✅ CRUD individual con asociación
│   │   │   └── recurrentes-disponibles/ # ✅ API para selector
│   │   ├── recurrentes/   # ✅ Gestión completa gastos recurrentes
│   │   │   └── [id]/generar-pago/ # ✅ Generación automática
│   │   ├── prestamos/     # Gestión de préstamos
│   │   ├── inversiones/   # Gestión de inversiones
│   │   ├── tareas/        # Sistema de tareas
│   │   └── ...           # Otras APIs
│   ├── admin/             # Panel de administración
│   │   ├── alertas/       # ✅ Control del motor automático (FASE 2)
│   │   ├── categorias/    # Gestión de categorías
│   │   └── ...           # Otras administraciones
│   ├── dashboard/         # Dashboard principal
│   ├── ai-financiero/     # ✅ Centro de IA (FASE 3)
│   ├── alertas/           # ✅ Centro de alertas (FASE 1)
│   ├── test-alertas/      # ✅ Página de pruebas (FASE 1)
│   ├── test-fase2/        # ✅ Página de pruebas (FASE 2)
│   ├── test-fase3/        # ✅ Página de pruebas (FASE 3)
│   ├── transacciones/     # ✅ Gestión con selector gastos recurrentes
│   │   ├── nuevo/         # ✅ Formulario con asociación
│   │   └── [id]/editar/   # ✅ Edición con manejo de cambios
│   ├── recurrentes/       # ✅ Gestión completa implementada
│   ├── grupos/            # Gastos grupales
│   ├── prestamos/         # Gestión de préstamos
│   ├── inversiones/       # Gestión de inversiones
│   ├── tareas/            # Sistema de tareas
│   └── ...
├── components/            # Componentes reutilizables
│   ├── ui/               # Componentes UI de Shadcn
│   ├── alertas/          # ✅ Componentes de alertas (FASE 1)
│   ├── ai/               # ✅ Componentes de IA (FASE 3)
│   └── ExpenseForm.tsx   # ✅ Con selector gastos recurrentes
├── lib/                  # Utilidades y configuraciones
│   ├── alert-engine/     # ✅ Motor de alertas automático (FASE 2)
│   ├── ai/               # ✅ Motor de inteligencia artificial (FASE 3)
│   └── prisma.ts         # ✅ Configuración optimizada Next.js 15
├── contexts/             # Contextos de React
│   ├── VisibilityContext.tsx   # ✅ Implementado
│   └── ThemeProvider.tsx       # ✅ Implementado
├── providers/            # Proveedores de la aplicación
│   └── ThemeProvider.tsx       # ✅ Implementado
└── scraping/             # Sistema de scraping para promociones
```

## Reglas de Desarrollo

### 1. Arquitectura y Patrones
- Usar App Router de Next.js 15 exclusivamente
- Implementar Server Components por defecto, Client Components solo cuando sea necesario
- Seguir el patrón de separación de responsabilidades: UI, lógica de negocio, acceso a datos
- Usar TypeScript estricto con tipos explícitos
- Implementar error boundaries y manejo de errores robusto

### 2. Base de Datos y Prisma
- **IMPORTANTE**: La aplicación usa PostgreSQL/Neon tanto en desarrollo como producción
- Usar `npx prisma db push` para cambios de schema (NO usar migraciones automáticas)
- Siempre usar `prisma.$transaction()` para operaciones que requieren atomicidad
- Validar datos antes de enviar a la base de datos
- Usar tipos generados por Prisma para type safety

### 3. Autenticación y Autorización
- Usar NextAuth.js v4 para autenticación
- Implementar middleware para proteger rutas
- Validar sesiones en API routes usando `getServerSession()`
- Manejar roles de usuario (admin, usuario regular)
- Proteger rutas sensibles del panel de administración

### 4. API Routes
- Usar métodos HTTP apropiados (GET, POST, PUT, DELETE)
- Implementar validación de entrada con Zod
- Manejar errores de forma consistente con códigos HTTP apropiados
- Usar `NextRequest` y `NextResponse` para tipado
- Implementar rate limiting para endpoints sensibles

### 5. Componentes UI
- Usar componentes de Shadcn/ui como base
- Implementar componentes accesibles (ARIA labels, keyboard navigation)
- Usar TailwindCSS para estilos, evitar CSS custom
- Implementar loading states y skeleton loaders
- Usar Lucide React para iconos
- **Integrar con VisibilityContext para ocultación de valores**
- **Soportar ThemeProvider para modo oscuro por defecto**

### 6. Gestión de Estado
- Usar React Context para estado global (Currency, Sidebar, Visibility, Theme)
- Implementar custom hooks para lógica reutilizable
- Usar `useState` y `useEffect` apropiadamente
- Evitar prop drilling excesivo

### 7. Formularios y Validación
- Usar React Hook Form para formularios complejos
- Implementar validación con Zod
- Manejar estados de loading y error en formularios
- Usar componentes controlados para inputs críticos

### 8. Funcionalidades Específicas

#### Transacciones y Gastos
- Validar montos y fechas antes de guardar
- Implementar categorización automática
- Manejar diferentes tipos de movimiento (efectivo, digital, ahorro, tarjeta)
- Soporte para gastos grupales y individuales
- **✅ Asociación con gastos recurrentes** en creación y edición
- **✅ Cálculo automático de estados** (pendiente/pago_parcial/pagado)
- **✅ Modo familiar** - Toggle para administradores ver transacciones de toda la familia

#### **Sistema de Gastos Recurrentes (COMPLETADO)**
- **✅ Relación padre-hijo** con campo `gastoRecurrenteId` en tabla Gasto
- **✅ Estados automáticos** calculados en tiempo real basados en pagos asociados
- **✅ Selector dinámico** en formularios de transacciones con información visual
- **✅ API optimizada** `/api/gastos/recurrentes-disponibles` con timeouts
- **✅ Generación automática** de transacciones desde gastos recurrentes
- **✅ Transacciones atómicas** para garantizar consistencia de datos
- **✅ Manejo de cambios** de asociación (A→B, A→ninguno, ninguno→A)
- **✅ Información visual** del impacto de pagos y saldos pendientes

#### Préstamos
- Calcular cuotas usando amortización francesa
- Registrar pagos automáticamente como gastos
- Manejar estados del préstamo (activo, pagado, vencido)
- Validar fechas de pago y vencimiento
- **Alertas automáticas** de cuotas próximas

#### Inversiones
- Registrar transacciones de inversión (depósitos, retiros, dividendos)
- Calcular rendimientos automáticamente
- Manejar cotizaciones históricas
- Soporte para diferentes tipos de inversión
- **Alertas automáticas** de vencimientos

#### Sistema de Scraping
- Implementar scrapers robustos con manejo de errores
- Usar Puppeteer para sitios que requieren JavaScript
- Implementar rate limiting y respeto por robots.txt
- Guardar promociones con fechas de vencimiento

#### **Sistema de Alertas (COMPLETADO)**
- **Usar AlertEngine** para evaluación automática de condiciones
- **Implementar diferentes tipos** de alerta según prioridad
- **Soporte para múltiples canales** (in-app activo, email/SMS/WhatsApp preparado)
- **Configuración granular** por usuario completamente funcional
- **Integración con OpenAI** para alertas inteligentes implementada

#### **Motor Automático (COMPLETADO)**
- **AlertScheduler funcionando** con patrón Singleton
- **Evaluación cada 60 minutos** configurable
- **Control completo** start/stop/runOnce
- **Limpieza automática** de alertas expiradas
- **Panel de administración** completamente operativo

#### **Inteligencia Artificial (COMPLETADO)**
- **AIAnalyzer integrado** con OpenAI
- **5 tipos de análisis** funcionando correctamente
- **Prompts especializados** en finanzas en español
- **Respuestas estructuradas** JSON validadas
- **Centro de IA** completamente funcional

### 9. Performance y Optimización
- Usar `loading.tsx` y `error.tsx` en rutas
- Implementar lazy loading para componentes pesados
- Optimizar consultas a la base de datos (incluir relaciones necesarias)
- Usar `Suspense` para componentes que cargan datos
- **Configurar timeouts** para APIs de OpenAI

### 10. Seguridad
- Validar todas las entradas del usuario
- Sanitizar datos antes de mostrar en UI
- Usar HTTPS en producción
- Implementar CSRF protection
- No exponer información sensible en el cliente
- **Proteger API keys** de OpenAI

### 11. Manejo de Errores
- Implementar try-catch en todas las operaciones async
- Usar toast notifications para feedback al usuario
- Loggear errores apropiadamente
- Implementar fallbacks para componentes que fallan
- **Manejo específico** de errores de OpenAI

### 12. Internacionalización
- Usar formato de moneda argentino (ARS) por defecto
- Implementar fechas en español con date-fns
- Usar formato de números apropiado para Argentina

### 13. Testing y Calidad
- Escribir tests para funciones críticas
- Usar ESLint y Prettier para consistencia de código
- Implementar type checking estricto
- Documentar funciones complejas
- **Usar páginas de prueba** implementadas

### 14. Deployment y Configuración
- Usar variables de entorno para configuración
- Implementar scripts PowerShell para desarrollo local
- Configurar Vercel para deployment automático
- Usar Neon para base de datos en producción
- **Configurar Plan Pro** de Vercel para timeouts de IA

## Variables de Entorno Requeridas
```bash
DATABASE_URL=postgresql://...
NEXTAUTH_SECRET=...
NEXTAUTH_URL=...
OPENAI_API_KEY=... # ✅ REQUERIDO para funcionalidades de IA
TWILIO_ACCOUNT_SID=... # Opcional para notificaciones
TWILIO_AUTH_TOKEN=... # Opcional para notificaciones
```

## Comandos de Desarrollo
```powershell
npm run dev:full        # Iniciar con variables de entorno
npm run studio          # Prisma Studio con variables
npx prisma db push      # Sincronizar schema
npx prisma generate     # Generar cliente

# 🖥️ COMANDOS WINDOWS/POWERSHELL ESPECÍFICOS
.\start-dev.ps1         # Script PowerShell de desarrollo
Set-Location "ruta"     # Cambiar directorio (NO usar cd en algunos contextos)
Get-ChildItem          # Listar archivos (NO usar ls)
```

## 🚨 REGLAS CRÍTICAS DE SEGURIDAD

### ❌ PROHIBICIONES ABSOLUTAS
- **NUNCA borrar datos de la base de datos**: No usar DELETE, TRUNCATE, DROP
- **NUNCA resetear la base de datos**: No usar reset, seed destructivos
- **NUNCA usar comandos Linux**: No usar bash, sh, cd, ls en comandos
- **NUNCA simular datos**: Solo trabajar con datos reales del usuario

## Patrones de Código Específicos

### API Route Pattern
```typescript
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'No autorizado' }, { status: 401 })
    }
    
    // Lógica del endpoint
    
    return NextResponse.json(data)
  } catch (error) {
    console.error('Error:', error)
    return NextResponse.json({ error: 'Error interno' }, { status: 500 })
  }
}
```

### Component Pattern
```typescript
interface ComponentProps {
  // Props tipadas
}

export function Component({ prop }: ComponentProps) {
  const [loading, setLoading] = useState(false)
  const { valuesVisible } = useVisibility() // Usar contexto de visibilidad
  const { theme } = useTheme() // Usar contexto de tema
  
  // Lógica del componente
  
  if (loading) return <Skeleton />
  
  return (
    <div className="space-y-4">
      {/* JSX con soporte para visibilidad y tema */}
    </div>
  )
}
```

### Database Query Pattern
```typescript
const result = await prisma.gasto.findMany({
  where: { userId: session.user.id },
  include: {
    categoria: true,
    user: true
  },
  orderBy: { fecha: 'desc' }
})
```

### **OpenAI Integration Pattern** ✅
```typescript
const response = await openai.chat.completions.create({
  model: "gpt-3.5-turbo", // o "gpt-4o-mini"
  messages: [
    {
      role: "system",
      content: "Eres un asistente financiero especializado..."
    },
    {
      role: "user", 
      content: prompt
    }
  ],
  temperature: 0.3,
  response_format: { type: "json_object" }
})
```

### **Next.js 15 API Route Pattern** ✅
```typescript
// CORRECTO: Uso de await params para Next.js 15
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const { id: idParam } = await params  // ✅ Await params requerido
    
    const session = await getServerSession(authOptions)
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'No autorizado' }, { status: 401 })
    }
    
    // Resto de la lógica...
    
    return NextResponse.json(data)
  } catch (error) {
    console.error('Error:', error)
    return NextResponse.json({ error: 'Error interno' }, { status: 500 })
  }
}
```

### **Gastos Recurrentes Pattern** ✅
```typescript
// Crear transacción con asociación a gasto recurrente
export async function POST(request: NextRequest) {
  const { gastoRecurrenteId, ...datos } = await request.json()
  
  // Validar gasto recurrente si se proporciona
  let gastoRecurrente = null
  if (gastoRecurrenteId) {
    gastoRecurrente = await prisma.gastoRecurrente.findFirst({
      where: { id: Number(gastoRecurrenteId), userId: usuario.id }
    })
    
    if (!gastoRecurrente) {
      return NextResponse.json({ error: 'Gasto recurrente no válido' }, { status: 400 })
    }
  }
  
  // Transacción atómica para crear gasto y actualizar estado
  const resultado = await prisma.$transaction(async (tx) => {
    const nuevoGasto = await tx.gasto.create({
      data: {
        ...datos,
        gastoRecurrenteId: gastoRecurrenteId ? Number(gastoRecurrenteId) : null
      }
    })
    
    // Recalcular estado del recurrente si está asociado
    if (gastoRecurrente) {
      const totalPagado = await tx.gasto.aggregate({
        where: { gastoRecurrenteId: gastoRecurrente.id },
        _sum: { monto: true }
      })
      
      const montoPagado = totalPagado._sum.monto || 0
      const nuevoEstado = montoPagado >= gastoRecurrente.monto 
        ? 'pagado' 
        : montoPagado > 0 
          ? 'pago_parcial' 
          : 'pendiente'
      
      await tx.gastoRecurrente.update({
        where: { id: gastoRecurrente.id },
        data: { estado: nuevoEstado, ultimoPago: new Date() }
      })
    }
    
    return nuevoGasto
  })
  
  return NextResponse.json(resultado)
}
```

### **Performance Pattern con Timeouts** ✅
```typescript
// Query con timeout para evitar problemas en Neon
const gastosRecurrentes = await Promise.race([
  prisma.gastoRecurrente.findMany({
    where: { userId: usuario.id, estado: { in: ['pendiente', 'pago_parcial'] } },
    include: {
      categoria: { select: { id: true, descripcion: true } },
      gastosGenerados: { 
        select: { id: true, monto: true, fecha: true },
        take: 10 // Limitar para performance
      }
    },
    take: 50 // Máximo 50 resultados
  }),
  new Promise((_, reject) => 
    setTimeout(() => reject(new Error('Timeout en query')), 15000)
  )
]) as any

// Enriquecimiento de datos con cálculos
const gastosConInfo = gastosRecurrentes.map(recurrente => {
  const totalPagado = recurrente.gastosGenerados.reduce((sum, pago) => sum + pago.monto, 0)
  return {
    ...recurrente,
    totalPagado,
    saldoPendiente: recurrente.monto - totalPagado,
    porcentajePagado: (totalPagado / recurrente.monto) * 100
  }
})
```

### **Formulario con Selector de Gastos Recurrentes** ✅
```typescript
// Componente con selector de gastos recurrentes
export function ExpenseForm() {
  const [gastosRecurrentes, setGastosRecurrentes] = useState([])
  const [gastoRecurrenteId, setGastoRecurrenteId] = useState("")
  const [gastoRecurrenteSeleccionado, setGastoRecurrenteSeleccionado] = useState(null)
  
  // Cargar gastos recurrentes disponibles
  useEffect(() => {
    fetch('/api/gastos/recurrentes-disponibles')
      .then(res => res.json())
      .then(setGastosRecurrentes)
      .catch(console.error)
  }, [])
  
  // Auto-llenado al seleccionar recurrente
  const handleGastoRecurrenteChange = (value: string) => {
    setGastoRecurrenteId(value === "none" ? "" : value)
    
    if (value !== "none") {
      const recurrente = gastosRecurrentes.find(g => g.id.toString() === value)
      setGastoRecurrenteSeleccionado(recurrente)
      if (recurrente) {
        setConcepto(recurrente.concepto) // Auto-llenar concepto
      }
    } else {
      setGastoRecurrenteSeleccionado(null)
    }
  }
  
  return (
    <form>
      {/* Selector de gasto recurrente */}
      <Select value={gastoRecurrenteId || "none"} onValueChange={handleGastoRecurrenteChange}>
        <SelectTrigger>
          <SelectValue placeholder="Seleccionar gasto recurrente" />
        </SelectTrigger>
        <SelectContent>
          <SelectItem value="none">Sin asociar</SelectItem>
          {gastosRecurrentes.map(recurrente => (
            <SelectItem key={recurrente.id} value={recurrente.id.toString()}>
              {recurrente.concepto} - ${recurrente.monto.toLocaleString()}
              {recurrente.estado === 'pago_parcial' && 
                ` (${recurrente.porcentajePagado.toFixed(1)}% pagado)`
              }
            </SelectItem>
          ))}
        </SelectContent>
      </Select>
      
      {/* Información visual del impacto */}
      {gastoRecurrenteSeleccionado && (
        <div className="bg-blue-50 dark:bg-blue-950 p-3 rounded-lg mt-2">
          <p className="text-sm font-medium">Impacto del pago:</p>
          <p className="text-xs">
            Saldo pendiente: ${gastoRecurrenteSeleccionado.saldoPendiente.toLocaleString()}
          </p>
          <p className="text-xs">
            Con este pago: {calcularNuevoEstado(gastoRecurrenteSeleccionado, monto)}
          </p>
        </div>
      )}
      
      {/* Resto del formulario... */}
    </form>
  )
}
```

### **Modo Familiar Pattern** ✅
```typescript
// Componente con modo familiar para administradores
export function TransaccionesPage() {
  const [modoFamiliar, setModoFamiliar] = useState(false)
  const { esAdministradorFamiliar } = usePermisosFamiliares()
  
  // Fetch automático según modo
  const fetchGastosPersonales = async () => {
    const endpoint = (modoFamiliar && esAdministradorFamiliar) 
      ? '/api/gastos/familiares' 
      : '/api/gastos'
    
    const response = await fetch(endpoint)
    const data = await response.json()
    
    if (modoFamiliar && data.gastos) {
      setGastosPersonales(data.gastos) // API familiar
    } else {
      setGastosPersonales(data) // API personal
    }
  }
  
  return (
    <div>
      {/* Toggle modo familiar */}
      {esAdministradorFamiliar && (
        <div className="mb-4 p-3 border rounded-lg bg-blue-50 dark:bg-blue-950">
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium">
              {modoFamiliar ? 'Ver transacciones familiares' : 'Ver mis transacciones'}
            </span>
            <Button
              variant={modoFamiliar ? "default" : "outline"}
              size="sm"
              onClick={() => setModoFamiliar(!modoFamiliar)}
              className="gap-2"
            >
              {modoFamiliar ? (
                <>
                  <User className="h-4 w-4" />
                  Cambiar a Personal
                </>
              ) : (
                <>
                  <Users className="h-4 w-4" />
                  Ver Familia
                </>
              )}
            </Button>
          </div>
        </div>
      )}
      
      {/* Lista de transacciones con identificación de usuario */}
      {gastosFiltrados.map((movimiento) => (
        <div key={movimiento.id}>
          <div className="flex items-center gap-2 text-sm text-muted-foreground">
            {modoFamiliar && movimiento.user?.name && (
              <Badge variant="outline" className="text-xs bg-purple-50 text-purple-700 border-purple-200">
                {movimiento.user.name}
              </Badge>
            )}
            {/* Resto de badges... */}
          </div>
        </div>
      ))}
    </div>
  )
}
```

## Notas Importantes
- **NO usar datos simulados o ficticios**
- **NO implementar reseteo automático de base de datos**
- **Siempre validar permisos de usuario antes de operaciones**
- **Usar PostgreSQL/Neon exclusivamente (no SQLite)**
- **Mantener consistencia en el formato de fechas y monedas**
- **✅ PROYECTO COMPLETADO**: Las 3 fases + gastos recurrentes implementados y funcionando
- **Usar contextos de Visibility y Theme en todos los componentes nuevos**
- **✅ OpenAI integrado**: Usar AIAnalyzer para nuevas funcionalidades de IA
- **✅ AlertEngine funcionando**: Usar para evaluar nuevas condiciones automáticas
- **✅ Gastos Recurrentes**: Sistema completo con asociación bidireccional implementado
- **✅ Modo Familiar**: Toggle personal/familiar con control de permisos para administradores
- **✅ Next.js 15**: Usar `await params` en todas las API routes nuevas
- **✅ Performance**: Implementar timeouts en queries críticas para evitar problemas con Neon
- **✅ Páginas de prueba disponibles**: `/test-alertas`, `/test-fase2`, `/test-fase3`, `/recurrentes`