# Cursor Rules para Aplicación de Gestión de Gastos

## Información del Proyecto
- **Aplicación**: Sistema de gestión de gastos personales y grupales
- **Stack**: Next.js 15, React 18, TypeScript, Prisma, PostgreSQL (Neon), NextAuth.js, OpenAI
- **UI**: TailwindCSS, Shadcn/ui, Lucide React
- **Base de datos**: PostgreSQL unificada (desarrollo y producción con Neon)

## 🚀 HOJA DE RUTA DE DESARROLLO 
> **Estado**: ✅ **PROYECTO 100% COMPLETADO** - 3 FASES IMPLEMENTADAS
> 
> **Referencia**: Ver `DOCUMENTACION.md`, `FASE_2_COMPLETADA.md` y `FASE_3_COMPLETADA.md` para información detallada

### **✅ TODAS LAS FASES COMPLETADAS - Enero 2025**

#### **✅ FASE 1 COMPLETADA - Sistema de Alertas Avanzado**
- ✅ Modelo `Alerta` y `ConfiguracionAlerta` en Prisma
- ✅ APIs completas para gestión de alertas (`/api/alertas/*`)
- ✅ `NotificationCenter` implementado y funcionando
- ✅ Página dedicada `/alertas` con tabs (Activas, Historial, Configuración)
- ✅ Centro de notificaciones persistente en header
- ✅ 13 tipos de alerta implementados
- ✅ 4 niveles de prioridad con iconos y colores
- ✅ Integración completa con VisibilityContext y ThemeProvider
- ✅ Sin duplicación de headers
- ✅ Acciones completas: marcar leída, accionar, eliminar

#### **✅ FASE 2 COMPLETADA - Motor Automático de Alertas**
- ✅ `AlertEngine` para evaluación automática de condiciones (8 tipos)
- ✅ `AlertScheduler` con patrón Singleton para programación automática
- ✅ APIs de control (`/api/alertas/evaluate`, `/api/alertas/scheduler`)
- ✅ Panel de administración en `/admin/alertas`
- ✅ Página de pruebas `/test-fase2` completamente funcional
- ✅ Alertas automáticas de presupuestos (80%, 90%, 100% usado)
- ✅ Sistema de programación de evaluaciones cada 60 minutos
- ✅ Detección automática de gastos inusuales/anómalos
- ✅ Configuración granular completa por usuario

#### **✅ FASE 3 COMPLETADA - Inteligencia Artificial**
- ✅ `AIAnalyzer` con integración OpenAI completa
- ✅ 5 APIs de IA (`/api/ai/*`) funcionando correctamente
- ✅ Centro de IA `/ai-financiero` con componentes especializados
- ✅ Página de pruebas `/test-fase3` completamente funcional
- ✅ Integración OpenAI para análisis de patrones (GPT-3.5-turbo, GPT-4o-mini)
- ✅ Recomendaciones personalizadas de ahorro con impacto económico
- ✅ Alertas predictivas basadas en tendencias
- ✅ Reportes inteligentes automáticos mensuales
- ✅ Detección de anomalías y gastos inusuales

### **🎯 ESTADO ACTUAL: LISTO PARA PRODUCCIÓN**

#### **Funcionalidades Principales Implementadas** ✅
- ✅ Sistema básico de gestión de gastos y transacciones
- ✅ Autenticación con NextAuth.js
- ✅ Dashboard con visibilidad de valores (botón ojo)
- ✅ Tema oscuro por defecto
- ✅ Sistema de presupuestos con alertas automáticas
- ✅ Gestión de préstamos e inversiones con alertas
- ✅ Panel de administración completo
- ✅ Sistema de scraping para promociones
- ✅ **Sistema de tareas personales y financieras**
- ✅ **SISTEMA DE ALERTAS COMPLETO (FASE 1)**
- ✅ **MOTOR AUTOMÁTICO DE ALERTAS (FASE 2)**
- ✅ **INTELIGENCIA ARTIFICIAL INTEGRADA (FASE 3)**

#### **Próximas Expansiones Sugeridas (FASE 4+)**
- [ ] Gamificación (badges, streaks, logros)
- [ ] Widgets personalizables en dashboard
- [ ] PWA con notificaciones push
- [ ] Integraciones bancarias argentinas (Mercado Pago, etc.)
- [ ] Chat AI conversacional 24/7
- [ ] Internacionalización para otros países latinoamericanos

### Reglas Específicas para Mantenimiento 🔔 ✅

#### Patrones de Implementación Completados ✅
```typescript
// Modelo base para alertas - IMPLEMENTADO Y FUNCIONAL
interface Alerta {
  id: string
  userId: string
  tipo: TipoAlerta
  prioridad: PrioridadAlerta
  titulo: string
  mensaje: string
  leida: boolean
  accionado: boolean
  fechaCreacion: Date
  fechaExpiracion?: Date
  metadatos?: Record<string, any>
  // Relaciones opcionales
  gastoRecurrenteId?: number
  prestamoId?: string
  inversionId?: string
  presupuestoId?: string
  tareaId?: string
  promocionId?: number
}

// Engine de evaluación de alertas - IMPLEMENTADO Y FUNCIONAL
class AlertEngine {
  async evaluateConditions(userId: string): Promise<Alerta[]>
  async processPresupuestosAlerts(userId: string): Promise<Alerta[]>
  async analyzePatterns(userId: string): Promise<Alerta[]>
  async runAutomaticEvaluation(userId: string): Promise<number>
}

// Motor de Inteligencia Artificial - IMPLEMENTADO Y FUNCIONAL
class AIAnalyzer {
  async analizarPatrones(userId: string, meses: number): Promise<PatronesAnalisis>
  async generarRecomendaciones(userId: string): Promise<RecomendacionIA[]>
  async detectarAnomalias(userId: string): Promise<AnomaliaDetectada[]>
  async generarReporte(userId: string): Promise<ReporteInteligente>
  async predecirAlertas(userId: string): Promise<AlertaPredictiva[]>
}
```

#### Componentes UI Estándar ✅
```typescript
// NotificationCenter en header - IMPLEMENTADO Y FUNCIONAL
export function NotificationCenter() {
  const { alertas, stats } = useAlertas()
  const { valuesVisible } = useVisibility()
  return (
    <DropdownMenu>
      <Bell />
      <Badge>{stats.noLeidas}</Badge>
      {/* Lista de alertas con acciones */}
    </DropdownMenu>
  )
}

// AlertsList para gestión completa - IMPLEMENTADO Y FUNCIONAL
export function AlertsList({ alertas, onMarcarLeida, onEliminar }) {
  // Componente completo con filtros, acciones y estados
}

// Componentes de IA - IMPLEMENTADOS Y FUNCIONALES
export function PatronesAnalisis() {
  // Análisis de patrones con OpenAI
}

export function RecomendacionesIA() {
  // Recomendaciones personalizadas
}
```

#### APIs Implementadas y Funcionales ✅
- ✅ `GET /api/alertas` - Listar alertas con filtros y paginación
- ✅ `POST /api/alertas` - Crear nueva alerta  
- ✅ `PUT /api/alertas/[id]` - Actualizar alerta
- ✅ `DELETE /api/alertas/[id]` - Eliminar alerta
- ✅ `GET/PUT /api/alertas/config` - Configuraciones de usuario
- ✅ `POST /api/alertas/test` - Crear alertas de prueba (con CORS)
- ✅ `POST /api/alertas/evaluate` - Evaluación automática de condiciones
- ✅ `GET /api/alertas/scheduler` - Estado del scheduler automático
- ✅ `POST /api/alertas/scheduler` - Control del scheduler (start/stop/runOnce)
- ✅ `GET /api/ai/analizar-patrones` - Análisis de patrones con IA
- ✅ `GET /api/ai/recomendaciones` - Recomendaciones personalizadas
- ✅ `GET /api/ai/alertas-predictivas` - Alertas predictivas
- ✅ `GET /api/ai/reporte-inteligente` - Reportes ejecutivos con IA
- ✅ `GET /api/ai/detectar-anomalias` - Detección de gastos anómalos

## Estructura del Proyecto
```
src/
├── app/                    # App Router de Next.js
│   ├── api/               # API Routes
│   │   ├── ai/            # ✅ APIs de Inteligencia Artificial (FASE 3)
│   │   ├── alertas/       # ✅ Sistema de alertas completo (FASE 1+2)
│   │   ├── gastos/        # Gestión de transacciones
│   │   ├── prestamos/     # Gestión de préstamos
│   │   ├── inversiones/   # Gestión de inversiones
│   │   ├── tareas/        # Sistema de tareas
│   │   └── ...           # Otras APIs
│   ├── admin/             # Panel de administración
│   │   ├── alertas/       # ✅ Control del motor automático (FASE 2)
│   │   ├── categorias/    # Gestión de categorías
│   │   └── ...           # Otras administraciones
│   ├── dashboard/         # Dashboard principal
│   ├── ai-financiero/     # ✅ Centro de IA (FASE 3)
│   ├── alertas/           # ✅ Centro de alertas (FASE 1)
│   ├── test-alertas/      # ✅ Página de pruebas (FASE 1)
│   ├── test-fase2/        # ✅ Página de pruebas (FASE 2)
│   ├── test-fase3/        # ✅ Página de pruebas (FASE 3)
│   ├── transacciones/     # Gestión de transacciones
│   ├── grupos/            # Gastos grupales
│   ├── prestamos/         # Gestión de préstamos
│   ├── inversiones/       # Gestión de inversiones
│   ├── tareas/            # Sistema de tareas
│   └── ...
├── components/            # Componentes reutilizables
│   ├── ui/               # Componentes UI de Shadcn
│   ├── alertas/          # ✅ Componentes de alertas (FASE 1)
│   └── ai/               # ✅ Componentes de IA (FASE 3)
├── lib/                  # Utilidades y configuraciones
│   ├── alert-engine/     # ✅ Motor de alertas automático (FASE 2)
│   └── ai/               # ✅ Motor de inteligencia artificial (FASE 3)
├── contexts/             # Contextos de React
│   ├── VisibilityContext.tsx   # ✅ Implementado
│   └── ThemeProvider.tsx       # ✅ Implementado
├── providers/            # Proveedores de la aplicación
│   └── ThemeProvider.tsx       # ✅ Implementado
└── scraping/             # Sistema de scraping para promociones
```

## Reglas de Desarrollo

### 1. Arquitectura y Patrones
- Usar App Router de Next.js 15 exclusivamente
- Implementar Server Components por defecto, Client Components solo cuando sea necesario
- Seguir el patrón de separación de responsabilidades: UI, lógica de negocio, acceso a datos
- Usar TypeScript estricto con tipos explícitos
- Implementar error boundaries y manejo de errores robusto

### 2. Base de Datos y Prisma
- **IMPORTANTE**: La aplicación usa PostgreSQL/Neon tanto en desarrollo como producción
- Usar `npx prisma db push` para cambios de schema (NO usar migraciones automáticas)
- Siempre usar `prisma.$transaction()` para operaciones que requieren atomicidad
- Validar datos antes de enviar a la base de datos
- Usar tipos generados por Prisma para type safety

### 3. Autenticación y Autorización
- Usar NextAuth.js v4 para autenticación
- Implementar middleware para proteger rutas
- Validar sesiones en API routes usando `getServerSession()`
- Manejar roles de usuario (admin, usuario regular)
- Proteger rutas sensibles del panel de administración

### 4. API Routes
- Usar métodos HTTP apropiados (GET, POST, PUT, DELETE)
- Implementar validación de entrada con Zod
- Manejar errores de forma consistente con códigos HTTP apropiados
- Usar `NextRequest` y `NextResponse` para tipado
- Implementar rate limiting para endpoints sensibles

### 5. Componentes UI
- Usar componentes de Shadcn/ui como base
- Implementar componentes accesibles (ARIA labels, keyboard navigation)
- Usar TailwindCSS para estilos, evitar CSS custom
- Implementar loading states y skeleton loaders
- Usar Lucide React para iconos
- **Integrar con VisibilityContext para ocultación de valores**
- **Soportar ThemeProvider para modo oscuro por defecto**

### 6. Gestión de Estado
- Usar React Context para estado global (Currency, Sidebar, Visibility, Theme)
- Implementar custom hooks para lógica reutilizable
- Usar `useState` y `useEffect` apropiadamente
- Evitar prop drilling excesivo

### 7. Formularios y Validación
- Usar React Hook Form para formularios complejos
- Implementar validación con Zod
- Manejar estados de loading y error en formularios
- Usar componentes controlados para inputs críticos

### 8. Funcionalidades Específicas

#### Transacciones y Gastos
- Validar montos y fechas antes de guardar
- Implementar categorización automática
- Manejar diferentes tipos de movimiento (efectivo, digital, ahorro, tarjeta)
- Soporte para gastos grupales y individuales

#### Préstamos
- Calcular cuotas usando amortización francesa
- Registrar pagos automáticamente como gastos
- Manejar estados del préstamo (activo, pagado, vencido)
- Validar fechas de pago y vencimiento
- **Alertas automáticas** de cuotas próximas

#### Inversiones
- Registrar transacciones de inversión (depósitos, retiros, dividendos)
- Calcular rendimientos automáticamente
- Manejar cotizaciones históricas
- Soporte para diferentes tipos de inversión
- **Alertas automáticas** de vencimientos

#### Sistema de Scraping
- Implementar scrapers robustos con manejo de errores
- Usar Puppeteer para sitios que requieren JavaScript
- Implementar rate limiting y respeto por robots.txt
- Guardar promociones con fechas de vencimiento

#### **Sistema de Alertas (COMPLETADO)**
- **Usar AlertEngine** para evaluación automática de condiciones
- **Implementar diferentes tipos** de alerta según prioridad
- **Soporte para múltiples canales** (in-app activo, email/SMS/WhatsApp preparado)
- **Configuración granular** por usuario completamente funcional
- **Integración con OpenAI** para alertas inteligentes implementada

#### **Motor Automático (COMPLETADO)**
- **AlertScheduler funcionando** con patrón Singleton
- **Evaluación cada 60 minutos** configurable
- **Control completo** start/stop/runOnce
- **Limpieza automática** de alertas expiradas
- **Panel de administración** completamente operativo

#### **Inteligencia Artificial (COMPLETADO)**
- **AIAnalyzer integrado** con OpenAI
- **5 tipos de análisis** funcionando correctamente
- **Prompts especializados** en finanzas en español
- **Respuestas estructuradas** JSON validadas
- **Centro de IA** completamente funcional

### 9. Performance y Optimización
- Usar `loading.tsx` y `error.tsx` en rutas
- Implementar lazy loading para componentes pesados
- Optimizar consultas a la base de datos (incluir relaciones necesarias)
- Usar `Suspense` para componentes que cargan datos
- **Configurar timeouts** para APIs de OpenAI

### 10. Seguridad
- Validar todas las entradas del usuario
- Sanitizar datos antes de mostrar en UI
- Usar HTTPS en producción
- Implementar CSRF protection
- No exponer información sensible en el cliente
- **Proteger API keys** de OpenAI

### 11. Manejo de Errores
- Implementar try-catch en todas las operaciones async
- Usar toast notifications para feedback al usuario
- Loggear errores apropiadamente
- Implementar fallbacks para componentes que fallan
- **Manejo específico** de errores de OpenAI

### 12. Internacionalización
- Usar formato de moneda argentino (ARS) por defecto
- Implementar fechas en español con date-fns
- Usar formato de números apropiado para Argentina

### 13. Testing y Calidad
- Escribir tests para funciones críticas
- Usar ESLint y Prettier para consistencia de código
- Implementar type checking estricto
- Documentar funciones complejas
- **Usar páginas de prueba** implementadas

### 14. Deployment y Configuración
- Usar variables de entorno para configuración
- Implementar scripts PowerShell para desarrollo local
- Configurar Vercel para deployment automático
- Usar Neon para base de datos en producción
- **Configurar Plan Pro** de Vercel para timeouts de IA

## Variables de Entorno Requeridas
```bash
DATABASE_URL=postgresql://...
NEXTAUTH_SECRET=...
NEXTAUTH_URL=...
OPENAI_API_KEY=... # ✅ REQUERIDO para funcionalidades de IA
TWILIO_ACCOUNT_SID=... # Opcional para notificaciones
TWILIO_AUTH_TOKEN=... # Opcional para notificaciones
```

## Comandos de Desarrollo
```bash
npm run dev:full        # Iniciar con variables de entorno
npm run studio          # Prisma Studio con variables
npx prisma db push      # Sincronizar schema
npx prisma generate     # Generar cliente
```

## Patrones de Código Específicos

### API Route Pattern
```typescript
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'No autorizado' }, { status: 401 })
    }
    
    // Lógica del endpoint
    
    return NextResponse.json(data)
  } catch (error) {
    console.error('Error:', error)
    return NextResponse.json({ error: 'Error interno' }, { status: 500 })
  }
}
```

### Component Pattern
```typescript
interface ComponentProps {
  // Props tipadas
}

export function Component({ prop }: ComponentProps) {
  const [loading, setLoading] = useState(false)
  const { valuesVisible } = useVisibility() // Usar contexto de visibilidad
  const { theme } = useTheme() // Usar contexto de tema
  
  // Lógica del componente
  
  if (loading) return <Skeleton />
  
  return (
    <div className="space-y-4">
      {/* JSX con soporte para visibilidad y tema */}
    </div>
  )
}
```

### Database Query Pattern
```typescript
const result = await prisma.gasto.findMany({
  where: { userId: session.user.id },
  include: {
    categoria: true,
    user: true
  },
  orderBy: { fecha: 'desc' }
})
```

### **OpenAI Integration Pattern** ✅
```typescript
const response = await openai.chat.completions.create({
  model: "gpt-3.5-turbo", // o "gpt-4o-mini"
  messages: [
    {
      role: "system",
      content: "Eres un asistente financiero especializado..."
    },
    {
      role: "user", 
      content: prompt
    }
  ],
  temperature: 0.3,
  response_format: { type: "json_object" }
})
```

## Notas Importantes
- **NO usar datos simulados o ficticios**
- **NO implementar reseteo automático de base de datos**
- **Siempre validar permisos de usuario antes de operaciones**
- **Usar PostgreSQL/Neon exclusivamente (no SQLite)**
- **Mantener consistencia en el formato de fechas y monedas**
- **✅ PROYECTO COMPLETADO**: Las 3 fases están implementadas y funcionando
- **Usar contextos de Visibility y Theme en todos los componentes nuevos**
- **✅ OpenAI integrado**: Usar AIAnalyzer para nuevas funcionalidades de IA
- **✅ AlertEngine funcionando**: Usar para evaluar nuevas condiciones automáticas
- **✅ Páginas de prueba disponibles**: `/test-alertas`, `/test-fase2`, `/test-fase3`