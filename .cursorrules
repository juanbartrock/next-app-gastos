# Cursor Rules para AplicaciÃ³n de GestiÃ³n de Gastos

## InformaciÃ³n del Proyecto
- **AplicaciÃ³n**: Sistema de gestiÃ³n de gastos personales y grupales
- **Stack**: Next.js 15, React 18, TypeScript, Prisma, PostgreSQL (Neon), NextAuth.js
- **UI**: TailwindCSS, Shadcn/ui, Lucide React
- **Base de datos**: PostgreSQL unificada (desarrollo y producciÃ³n con Neon)

## ðŸš€ HOJA DE RUTA DE DESARROLLO 
> **Referencia**: Ver `prox-propuestas.md` para informaciÃ³n detallada

### Estado Actual Implementado âœ…
- Sistema bÃ¡sico de gestiÃ³n de gastos y transacciones
- AutenticaciÃ³n con NextAuth.js
- Dashboard con visibilidad de valores (botÃ³n ojo)
- Tema oscuro por defecto
- Sistema de presupuestos bÃ¡sico
- GestiÃ³n de prÃ©stamos e inversiones
- Panel de administraciÃ³n
- Sistema de scraping para promociones
- **ðŸŽ‰ SISTEMA DE ALERTAS COMPLETO (FASE 1) - Enero 2025**

### **âœ… FASE 1 COMPLETADA - Sistema de Alertas Mejorado**
- âœ… Modelo `Alerta` y `ConfiguracionAlerta` en Prisma
- âœ… APIs completas para gestiÃ³n de alertas (`/api/alertas/*`)
- âœ… `NotificationCenter` implementado y funcionando
- âœ… PÃ¡gina dedicada `/alertas` con tabs (Activas, Historial, ConfiguraciÃ³n)
- âœ… Centro de notificaciones persistente en header
- âœ… 13 tipos de alerta implementados
- âœ… 4 niveles de prioridad con iconos y colores
- âœ… IntegraciÃ³n completa con VisibilityContext y ThemeProvider
- âœ… Sin duplicaciÃ³n de headers
- âœ… Acciones completas: marcar leÃ­da, accionar, eliminar

### PrÃ³ximas Funcionalidades Prioritarias ðŸŽ¯

#### **FASE 2 - Motor AutomÃ¡tico de Alertas** (Siguiente)
- [ ] `AlertEngine` para evaluaciÃ³n automÃ¡tica de condiciones
- [ ] Alertas de presupuestos automÃ¡ticas (80%, 90%, 100% usado)
- [ ] Sistema de programaciÃ³n de evaluaciones
- [ ] DetecciÃ³n automÃ¡tica de gastos inusuales/anÃ³malos
- [ ] ConfiguraciÃ³n granular completa por usuario

#### **FASE 3 - Inteligencia Artificial**
- [ ] IntegraciÃ³n OpenAI para anÃ¡lisis de patrones
- [ ] Recomendaciones personalizadas de ahorro
- [ ] Alertas predictivas basadas en tendencias
- [ ] Reportes inteligentes automÃ¡ticos

#### **FASE 4 - Experiencia Avanzada**
- [ ] GamificaciÃ³n (badges, streaks, logros)
- [ ] Widgets personalizables en dashboard
- [ ] PWA con notificaciones push
- [ ] Integraciones bancarias argentinas

### Reglas EspecÃ­ficas para Desarrollo de Alertas ðŸ”” âœ…

#### Patrones de ImplementaciÃ³n âœ…
```typescript
// Modelo base para alertas - IMPLEMENTADO
interface Alerta {
  id: string
  userId: string
  tipo: TipoAlerta
  prioridad: PrioridadAlerta
  titulo: string
  mensaje: string
  leida: boolean
  accionado: boolean
  fechaCreacion: Date
  fechaExpiracion?: Date
  metadatos?: Record<string, any>
  // Relaciones opcionales
  gastoRecurrenteId?: number
  prestamoId?: string
  inversionId?: string
  presupuestoId?: string
  tareaId?: string
  promocionId?: number
}

// Engine de evaluaciÃ³n de alertas - PENDIENTE FASE 2
class AlertEngine {
  async evaluateConditions(userId: string): Promise<Alerta[]>
  async processPresupuestosAlerts(userId: string): Promise<Alerta[]>
  async analyzePatterns(userId: string): Promise<Alerta[]>
}
```

#### Componentes UI EstÃ¡ndar âœ…
```typescript
// NotificationCenter en header - IMPLEMENTADO
export function NotificationCenter() {
  const { alertas, stats } = useAlertas()
  const { valuesVisible } = useVisibility()
  return (
    <DropdownMenu>
      <Bell />
      <Badge>{stats.noLeidas}</Badge>
      {/* Lista de alertas con acciones */}
    </DropdownMenu>
  )
}

// AlertsList para gestiÃ³n completa - IMPLEMENTADO
export function AlertsList({ alertas, onMarcarLeida, onEliminar }) {
  // Componente completo con filtros, acciones y estados
}
```

#### APIs Implementadas âœ…
- âœ… `GET /api/alertas` - Listar alertas con filtros y paginaciÃ³n
- âœ… `POST /api/alertas` - Crear nueva alerta  
- âœ… `PUT /api/alertas/[id]` - Actualizar alerta
- âœ… `DELETE /api/alertas/[id]` - Eliminar alerta
- âœ… `GET/PUT /api/alertas/config` - Configuraciones de usuario
- âœ… `POST /api/alertas/test` - Crear alertas de prueba (con CORS)

## Estructura del Proyecto
```
src/
â”œâ”€â”€ app/                    # App Router de Next.js
â”‚   â”œâ”€â”€ api/               # API Routes
â”‚   â”œâ”€â”€ admin/             # Panel de administraciÃ³n
â”‚   â”œâ”€â”€ dashboard/         # Dashboard principal
â”‚   â”œâ”€â”€ alertas/           # âœ… Centro de alertas (IMPLEMENTADO)
â”‚   â”œâ”€â”€ test-alertas/      # âœ… PÃ¡gina de pruebas (IMPLEMENTADO)
â”‚   â”œâ”€â”€ transacciones/     # GestiÃ³n de transacciones
â”‚   â”œâ”€â”€ grupos/            # Gastos grupales
â”‚   â”œâ”€â”€ prestamos/         # GestiÃ³n de prÃ©stamos
â”‚   â”œâ”€â”€ inversiones/       # GestiÃ³n de inversiones
â”‚   â””â”€â”€ ...
â”œâ”€â”€ components/            # Componentes reutilizables
â”‚   â”œâ”€â”€ ui/               # Componentes UI de Shadcn
â”‚   â””â”€â”€ alertas/          # âœ… Componentes de alertas (IMPLEMENTADO)
â”‚       â”œâ”€â”€ NotificationCenter.tsx    # âœ… Centro de notificaciones
â”‚       â””â”€â”€ AlertsList.tsx           # âœ… Lista de alertas
â”œâ”€â”€ lib/                  # Utilidades y configuraciones
â”‚   â””â”€â”€ alert-engine/     # ðŸš§ Motor de alertas (FASE 2)
â”œâ”€â”€ contexts/             # Contextos de React
â”‚   â”œâ”€â”€ VisibilityContext.tsx   # âœ… Implementado
â”‚   â””â”€â”€ AlertsContext.tsx       # ðŸš§ Futuro (FASE 2)
â”œâ”€â”€ providers/            # Proveedores de la aplicaciÃ³n
â”‚   â””â”€â”€ ThemeProvider.tsx       # âœ… Implementado
â””â”€â”€ scraping/             # Sistema de scraping para promociones
```

## Reglas de Desarrollo

### 1. Arquitectura y Patrones
- Usar App Router de Next.js 15 exclusivamente
- Implementar Server Components por defecto, Client Components solo cuando sea necesario
- Seguir el patrÃ³n de separaciÃ³n de responsabilidades: UI, lÃ³gica de negocio, acceso a datos
- Usar TypeScript estricto con tipos explÃ­citos
- Implementar error boundaries y manejo de errores robusto

### 2. Base de Datos y Prisma
- **IMPORTANTE**: La aplicaciÃ³n usa PostgreSQL/Neon tanto en desarrollo como producciÃ³n
- Usar `npx prisma db push` para cambios de schema (NO usar migraciones automÃ¡ticas)
- Siempre usar `prisma.$transaction()` para operaciones que requieren atomicidad
- Validar datos antes de enviar a la base de datos
- Usar tipos generados por Prisma para type safety

### 3. AutenticaciÃ³n y AutorizaciÃ³n
- Usar NextAuth.js v4 para autenticaciÃ³n
- Implementar middleware para proteger rutas
- Validar sesiones en API routes usando `getServerSession()`
- Manejar roles de usuario (admin, usuario regular)
- Proteger rutas sensibles del panel de administraciÃ³n

### 4. API Routes
- Usar mÃ©todos HTTP apropiados (GET, POST, PUT, DELETE)
- Implementar validaciÃ³n de entrada con Zod
- Manejar errores de forma consistente con cÃ³digos HTTP apropiados
- Usar `NextRequest` y `NextResponse` para tipado
- Implementar rate limiting para endpoints sensibles

### 5. Componentes UI
- Usar componentes de Shadcn/ui como base
- Implementar componentes accesibles (ARIA labels, keyboard navigation)
- Usar TailwindCSS para estilos, evitar CSS custom
- Implementar loading states y skeleton loaders
- Usar Lucide React para iconos
- **Integrar con VisibilityContext para ocultaciÃ³n de valores**
- **Soportar ThemeProvider para modo oscuro por defecto**

### 6. GestiÃ³n de Estado
- Usar React Context para estado global (Currency, Sidebar, Visibility, Theme)
- Implementar custom hooks para lÃ³gica reutilizable
- Usar `useState` y `useEffect` apropiadamente
- Evitar prop drilling excesivo

### 7. Formularios y ValidaciÃ³n
- Usar React Hook Form para formularios complejos
- Implementar validaciÃ³n con Zod
- Manejar estados de loading y error en formularios
- Usar componentes controlados para inputs crÃ­ticos

### 8. Funcionalidades EspecÃ­ficas

#### Transacciones y Gastos
- Validar montos y fechas antes de guardar
- Implementar categorizaciÃ³n automÃ¡tica
- Manejar diferentes tipos de movimiento (efectivo, digital, ahorro, tarjeta)
- Soporte para gastos grupales y individuales

#### PrÃ©stamos
- Calcular cuotas usando amortizaciÃ³n francesa
- Registrar pagos automÃ¡ticamente como gastos
- Manejar estados del prÃ©stamo (activo, pagado, vencido)
- Validar fechas de pago y vencimiento

#### Inversiones
- Registrar transacciones de inversiÃ³n (depÃ³sitos, retiros, dividendos)
- Calcular rendimientos automÃ¡ticamente
- Manejar cotizaciones histÃ³ricas
- Soporte para diferentes tipos de inversiÃ³n

#### Sistema de Scraping
- Implementar scrapers robustos con manejo de errores
- Usar Puppeteer para sitios que requieren JavaScript
- Implementar rate limiting y respeto por robots.txt
- Guardar promociones con fechas de vencimiento

#### Sistema de Alertas (Nuevo)
- Usar AlertEngine para evaluaciÃ³n automÃ¡tica de condiciones
- Implementar diferentes tipos de alerta segÃºn prioridad
- Soporte para mÃºltiples canales (in-app, email, SMS, WhatsApp)
- ConfiguraciÃ³n granular por usuario
- IntegraciÃ³n con OpenAI para alertas inteligentes

### 9. Performance y OptimizaciÃ³n
- Usar `loading.tsx` y `error.tsx` en rutas
- Implementar lazy loading para componentes pesados
- Optimizar consultas a la base de datos (incluir relaciones necesarias)
- Usar `Suspense` para componentes que cargan datos

### 10. Seguridad
- Validar todas las entradas del usuario
- Sanitizar datos antes de mostrar en UI
- Usar HTTPS en producciÃ³n
- Implementar CSRF protection
- No exponer informaciÃ³n sensible en el cliente

### 11. Manejo de Errores
- Implementar try-catch en todas las operaciones async
- Usar toast notifications para feedback al usuario
- Loggear errores apropiadamente
- Implementar fallbacks para componentes que fallan

### 12. InternacionalizaciÃ³n
- Usar formato de moneda argentino (ARS) por defecto
- Implementar fechas en espaÃ±ol con date-fns
- Usar formato de nÃºmeros apropiado para Argentina

### 13. Testing y Calidad
- Escribir tests para funciones crÃ­ticas
- Usar ESLint y Prettier para consistencia de cÃ³digo
- Implementar type checking estricto
- Documentar funciones complejas

### 14. Deployment y ConfiguraciÃ³n
- Usar variables de entorno para configuraciÃ³n
- Implementar scripts PowerShell para desarrollo local
- Configurar Vercel para deployment automÃ¡tico
- Usar Neon para base de datos en producciÃ³n

## Variables de Entorno Requeridas
```bash
DATABASE_URL=postgresql://...
NEXTAUTH_SECRET=...
NEXTAUTH_URL=...
OPENAI_API_KEY=... (requerido para alertas inteligentes)
```

## Comandos de Desarrollo
```bash
npm run dev:full        # Iniciar con variables de entorno
npm run studio          # Prisma Studio con variables
npx prisma db push      # Sincronizar schema
npx prisma generate     # Generar cliente
```

## Patrones de CÃ³digo EspecÃ­ficos

### API Route Pattern
```typescript
export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'No autorizado' }, { status: 401 })
    }
    
    // LÃ³gica del endpoint
    
    return NextResponse.json(data)
  } catch (error) {
    console.error('Error:', error)
    return NextResponse.json({ error: 'Error interno' }, { status: 500 })
  }
}
```

### Component Pattern
```typescript
interface ComponentProps {
  // Props tipadas
}

export function Component({ prop }: ComponentProps) {
  const [loading, setLoading] = useState(false)
  const { valuesVisible } = useVisibility() // Usar contexto de visibilidad
  const { theme } = useTheme() // Usar contexto de tema
  
  // LÃ³gica del componente
  
  if (loading) return <Skeleton />
  
  return (
    <div className="space-y-4">
      {/* JSX con soporte para visibilidad y tema */}
    </div>
  )
}
```

### Database Query Pattern
```typescript
const result = await prisma.gasto.findMany({
  where: { userId: session.user.id },
  include: {
    categoria: true,
    user: true
  },
  orderBy: { fecha: 'desc' }
})
```

## Notas Importantes
- **NO usar datos simulados o ficticios**
- **NO implementar reseteo automÃ¡tico de base de datos**
- **Siempre validar permisos de usuario antes de operaciones**
- **Usar PostgreSQL/Neon exclusivamente (no SQLite)**
- **Mantener consistencia en el formato de fechas y monedas**
- **Seguir la hoja de ruta en `prox-propuestas.md` para nuevas funcionalidades**
- **Implementar sistema de alertas segÃºn arquitectura definida**
- **Usar contextos de Visibility y Theme en todos los componentes nuevos** 