const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

// Datos del usuario Monica Alvarez
const targetUser = {
  name: 'Monica Alvarez',
  newPassword: 'monica123' // Nueva contrase√±a temporal
};

async function resetPasswordMonica() {
  console.log('==============================================');
  console.log('üîÑ RESETEO DE CONTRASE√ëA MONICA ALVAREZ');
  console.log('==============================================');

  try {
    // 1. Buscar el usuario por nombre (case insensitive)
    console.log('üîç Buscando usuario Monica Alvarez...');
    
    // Buscar por nombre exacto o similares
    const possibleUsers = await prisma.user.findMany({
      where: {
        OR: [
          { name: { contains: 'Monica', mode: 'insensitive' } },
          { name: { contains: 'Alvarez', mode: 'insensitive' } },
          { email: { contains: 'monica', mode: 'insensitive' } }
        ]
      }
    });

    if (possibleUsers.length === 0) {
      console.log('‚ùå No se encontr√≥ ning√∫n usuario con nombre Monica Alvarez');
      console.log('üîç Buscando todos los usuarios disponibles...');
      
      const allUsers = await prisma.user.findMany({
        select: {
          id: true,
          name: true,
          email: true
        }
      });

      console.log('üë• Usuarios disponibles:');
      allUsers.forEach(user => {
        console.log(`   - ${user.name} (${user.email}) - ID: ${user.id}`);
      });
      
      return;
    }

    // Mostrar usuarios encontrados
    console.log(`‚úÖ Se encontraron ${possibleUsers.length} usuario(s) relacionado(s):`);
    possibleUsers.forEach((user, index) => {
      console.log(`   ${index + 1}. ${user.name} (${user.email}) - ID: ${user.id}`);
    });

    // Si hay m√°s de un usuario, tomar el que m√°s se parezca
    let targetUserFound;
    if (possibleUsers.length === 1) {
      targetUserFound = possibleUsers[0];
    } else {
      // Buscar el que contenga ambos nombres
      targetUserFound = possibleUsers.find(user => 
        user.name.toLowerCase().includes('monica') && 
        user.name.toLowerCase().includes('alvarez')
      ) || possibleUsers[0]; // Si no encuentra uno exacto, toma el primero
    }

    console.log(`üéØ Usuario seleccionado: ${targetUserFound.name} (${targetUserFound.email})`);

    // 2. Generar nueva contrase√±a hasheada
    console.log('üîê Generando nueva contrase√±a...');
    const hashedPassword = await bcrypt.hash(targetUser.newPassword, 12);

    // 3. Actualizar la contrase√±a en la base de datos
    console.log('üíæ Actualizando contrase√±a en la base de datos...');
    const updatedUser = await prisma.user.update({
      where: { id: targetUserFound.id },
      data: { password: hashedPassword }
    });

    console.log('‚úÖ Contrase√±a actualizada exitosamente');

    console.log('==============================================');
    console.log('üéâ RESETEO COMPLETADO EXITOSAMENTE');
    console.log('==============================================');
    console.log('üìù NUEVAS CREDENCIALES:');
    console.log(`   Usuario: ${updatedUser.name}`);
    console.log(`   Email: ${updatedUser.email}`);
    console.log(`   Nueva contrase√±a: ${targetUser.newPassword}`);
    console.log('‚ö†Ô∏è  IMPORTANTE: La contrase√±a debe cambiarse en el primer login');
    console.log('==============================================');

  } catch (error) {
    console.error('‚ùå ERROR AL RESETEAR CONTRASE√ëA:', error);
    throw error;
  }
}

async function main() {
  try {
    await resetPasswordMonica();
  } catch (error) {
    console.error('üí• PROCESO FALLIDO:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar el script
main(); 